{"./":{"url":"./","title":"前言","keywords":"","body":"Android逆向开发 最新版本：v0.7 更新时间：20221110 简介 介绍Android逆向开发相关的内容。包括逆向的核心思路；以及Hook插件与开发，包括Xposed、Cydia Substrace，以及其插件Android-OpenDebug、Introspy-Android；以及其他心得，包括adb、文件管理、文件管理器、相关资料；以及其他相关子教程。 源码+浏览+下载 本书的各种源码、在线浏览地址、多种格式文件下载如下： HonKit源码 crifan/android_reverse_dev: Android逆向开发 如何使用此HonKit源码去生成发布为电子书 详见：crifan/honkit_template: demo how to use crifan honkit template and demo 在线浏览 Android逆向开发 book.crifan.org Android逆向开发 crifan.github.io 离线下载阅读 Android逆向开发 PDF Android逆向开发 ePub Android逆向开发 Mobi 版权和用途说明 此电子书教程的全部内容，如无特别说明，均为本人原创。其中部分内容参考自网络，均已备注了出处。如发现有侵权，请通过邮箱联系我 admin 艾特 crifan.com，我会尽快删除。谢谢合作。 各种技术类教程，仅作为学习和研究使用。请勿用于任何非法用途。如有非法用途，均与本人无关。 鸣谢 感谢我的老婆陈雪的包容理解和悉心照料，才使得我crifan有更多精力去专注技术专研和整理归纳出这些电子书和技术教程，特此鸣谢。 其他 作者的其他电子书 本人crifan还写了其他150+本电子书教程，感兴趣可移步至： crifan/crifan_ebook_readme: Crifan的电子书的使用说明 关于作者 关于作者更多介绍，详见： 关于CrifanLi李茂 – 在路上 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-10 15:15:48 "},"overview/":{"url":"overview/","title":"概览","keywords":"","body":"概览 此处介绍安卓的安全和逆向中的安卓的逆向中关于逆向开发相关的内容。 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 16:46:17 "},"core_clue/":{"url":"core_clue/","title":"逆向核心思路","keywords":"","body":"逆向核心思路 TODO： 【未解决】Android的YouTube逆向：研究request请求api和protobuf相关部分代码 此处介绍安卓逆向的核心思路： 找核心代码的入口点 对于Android来说，往往是java中相关的基础的类，内置的类 比如 网络请求类 url相关的类 比如 new URL 字符串相关的类 可能会用到URL拼接，其内部涉及到字符串的拼接 比如 append getBytes String builder 再去写hook代码，加过滤条件，用工具调试 Xposed：用hook框架去写hook代码 frida：调试逻辑 期间配合抓包 先要抓包找相关url 后续才知道要过滤哪些url Java基础的内置的类 URL URL myURL = new URL(\"http://example.com/pages/\"); URL page1URL = new URL(myURL, \"page1.html\"); URL page2URL = new URL(myURL, \"page2.html\"); 或： new URL(\"http\", \"example.com\", \"/pages/page1.html\"); 或： //URLDemo.java import java.net.*; public class URLDemo { public static void main(String[] args) { try { URL url = new URL(\"http://www.javatpoint.com/java-tutorial\"); System.out.println(\"Protocol: \" + url.getProtocol()); System.out.println(\"Host Name: \" + url.getHost()); System.out.println(\"Port Number: \" + url.getPort()); System.out.println(\"File Name: \" + url.getFile()); } catch (Exception e) { System.out.println(e); } } } 或： import java.net.*; URL url = new URL(\"/a-guide-to-java-sockets\"); URL home = new URL(\"http://baeldung.com\"); URL url = new URL(home, \"a-guide-to-java-sockets\"); 或： @Test public void givenBaseUrl_whenCreatesRelativeUrl_thenCorrect() { URL baseUrl = new URL(\"http://baeldung.com\"); URL relativeUrl = new URL(baseUrl, \"a-guide-to-java-sockets\"); assertEquals(\"http://baeldung.com/a-guide-to-java-sockets\", relativeUrl.toString()); } 或： URL url = new URL(yourUrl, \"/api/v1/status.xml\"); 或： URL domain = new URL(\"http://example.com\"); URL url = new URL(domain + \"/files/resource.xml\"); crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 17:09:14 "},"hook_tweak_dev/":{"url":"hook_tweak_dev/","title":"hook插件与开发","keywords":"","body":"hook插件与开发 TODO： 把如何用XPosed写Android的hook插件的帖子整理过来 【已解决】Android 11的Magisk中安装EdXposed 0.5.2.2结果失败：请先从Magisk Manager中安装Riru Installation failed 【已解决】在Android 11中安装EdXposed框架 Android的Hook插件开发框架 Xposed Cydia Substrate crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 21:08:52 "},"hook_tweak_dev/xposed.html":{"url":"hook_tweak_dev/xposed.html","title":"XPosed","keywords":"","body":"Xposed Xposed 典型用途 用于安装相关插件比如FDex2，配合安卓破解，导出运行时app的dex文件 基于XPosed编写hook插件，实现特定功能 使用举例 安装到夜神模拟器中的XPosed 最新为：EdXposed 详见 独立教程：强大的安卓破解辅助工具：XPosed框架 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-09 11:10:25 "},"hook_tweak_dev/cydia_substrate/":{"url":"hook_tweak_dev/cydia_substrate/","title":"Cydia Substrate","keywords":"","body":"Cydia Substrate 主页 Cydia Substrate 下载 com.saurik.substrate.apk 功能 和Xposed类似的框架，用来安装各种插件，实现各种功能。 比如可以： 安装绕过ssl检测的插件，用来破解ssl pinning 关于安卓的app中的https： app内部启用了： SSL Pinning=ssl certificate pinning=certificate pinning =ssl证书绑定=证书绑定` 此处也可以用来安装相关插件，导出安卓的dex文件 特点 Hook底层方法非常方便 对so中的方法hook操作非常便捷 截图 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 21:07:33 "},"hook_tweak_dev/cydia_substrate/android_opendebug.html":{"url":"hook_tweak_dev/cydia_substrate/android_opendebug.html","title":"Android-OpenDebug","keywords":"","body":"Android-OpenDebug 主页 iSECPartners/Android-OpenDebug: Make any application debuggable 功能 是一个Cydia Substrate的插件 所以前提是要先安装Cydia Substrate 可以使得任何一个安卓程序可以被调试 就有了分析和破解的可能 下载 Android-OpenDebug APK下载 安装 adb install Android-OpenDebug.apk 或直接安装apk crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 21:08:30 "},"hook_tweak_dev/cydia_substrate/introspy_android.html":{"url":"hook_tweak_dev/cydia_substrate/introspy_android.html","title":"Introspy-Android","keywords":"","body":"Introspy-Android 主页 GitHub iSECPartners/Introspy-Android: Security profiling for blackbox Android 网站 Introspy-Android 功能 帮助分析安卓app运行期间的行为 以便于找到可能存在的安全问题 提示 是个Cydia Substrate插件 所以前提是先安装Cydia Substrate crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-07-18 09:55:45 "},"other_summary/":{"url":"other_summary/","title":"其他心得","keywords":"","body":"其他心得 TODO： hook框架 【整理】安卓hook框架：Sandhook crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-10 15:15:08 "},"other_summar/adb.html":{"url":"other_summar/adb.html","title":"adb","keywords":"","body":"adb TODO： 【整理】adb命令语法帮助信息 【已解决】Mac中运行adb shell无需su超级用户即可正常运行输出结果 【未解决】尝试解决adb只有su超级用户权限才能工作：adb版本 【已解决】Android Studio和安卓设备Google Pixel3重启后adb shell再次异常：只有su超级用户权限才能正常运行命令 【已解决】尝试解决adb没有su超级用户权限无法运行子命令：ps进程相关 【已解决】Android Studio中对于ADB：Use existing manually managed server且指定adb端口 【已解决】Mac中给adb start-server指定端口 【已解决】Mac中adb shell子命令运行卡死无响应 【已解决】安卓手机adb shell报错：Can't find service 【已解决】安卓手机Google Pixel3中adb命令pm运行报错：cmd Can't find service: package 【已解决】安卓手机adb shell service list报错：Found 0 services 【已解决】安卓手机adb shell无法直接运行命令但是进入shell后su后却可以 【已解决】adb shell带su超级用户权限去运行子命令 【未解决】pm安装重签名的apk报错：Failure INSTALL_FAILED_UPDATE_INCOMPATIBLE 【已解决】pm安装apktool重新打包的apk报错：Failure INSTALL_PARSE_FAILED_NO_CERTIFICATES 【无需解决】安卓手机pm卸载app报错：Failure DELETE_FAILED_INTERNAL_ERROR 【已解决】安卓手机中用adb shel中的pm去安装YouTube的apk 【已解决】安卓手机Google Pixel3中用pm安装YouTube的apk报错：Failure INSTALL_FAILED_VERSION_DOWNGRADE 用adb安装apk adb install xxx.apk = adb push xxx.apk somePath + pm install /somePath/xxx.apk 举例： crifan@licrifandeMacBook-Pro  ~/dev/dev_tool/android/EdXposed  pwd /Users/crifan/dev/dev_tool/android/EdXposed crifan@licrifandeMacBook-Pro  ~/dev/dev_tool/android/EdXposed  ll total 8224 crifan@licrifandeMacBook-Pro  ~/dev/dev_tool/android/EdXposed  adb install EdXposedManager-4.6.2-46200-org.meowcat.edxposed.manager-release.apk Performing Streamed Install Success adb shell 命令提示符 adb shell进入shell后： 命令行提示符 #=井号：root用户 $=美元符号：普通用户 另外，也可以通过： whoami 查看当前用户是什么 举例： root用户 blueline:/ # whoami root 普通用户：shell 13|blueline:/ $ whoami shell adb shell命令行前面的数字 正常情况，shell前面是没有数字的：  adb shell blueline:/ # pwd / 但是，如果前面出现一个数字加上竖杠，则表示：前一次命令执行的返回值，前一个命令运行出错了的出错码 比如： blueline:/ # pm --help cmd: Can't find service: package 20|blueline:/ # 此处的 20| 就是前一个命令运行出错的返回值=出错码 而继续运行，如果后续命令正常运行，则出错码就消失了： 20|blueline:/ # which pm /system/bin/pm blueline:/ # 其实表示的是： 上一个命令运行结果=返回值 0：表示没有出错 所以就不显示出错码 非0：就显示，提示你出错了 adb常见命令 相关 常用 Fastboot 命令 adb语法 > adb --help Android Debug Bridge version 1.0.41 Version 33.0.2-8557947 Installed as /Users/crifan/dev/dev_tool/android/AndroidSDK/platform-tools/adb global options: -a listen on all network interfaces, not just localhost -d use USB device (error if multiple devices connected) -e use TCP/IP device (error if multiple TCP/IP devices available) -s SERIAL use device with given serial (overrides $ANDROID_SERIAL) -t ID use device with given transport id -H name of adb server host [default=localhost] -P port of adb server [default=5037] -L SOCKET listen on given socket for adb server [default=tcp:localhost:5037] --one-device SERIAL|USB only allowed with 'start-server' or 'server nodaemon', server will only connect to one USB device, specified by a serial number or USB device address. --exit-on-write-error exit if stdout is closed general commands: devices [-l] list connected devices (-l for long output) help show this help message version show version num networking: connect HOST[:PORT] connect to a device via TCP/IP [default port=5555] disconnect [HOST[:PORT]] disconnect from given TCP/IP device [default port=5555], or all pair HOST[:PORT] [PAIRING CODE] pair with a device for secure TCP/IP communication forward --list list all forward socket connections forward [--no-rebind] LOCAL REMOTE forward socket connection using: tcp: ( may be \"tcp:0\" to pick any open port) localabstract: localreserved: localfilesystem: jdwp: (remote only) vsock:: (remote only) acceptfd: (listen only) forward --remove LOCAL remove specific forward socket connection forward --remove-all remove all forward socket connections ppp TTY [PARAMETER...] run PPP over USB reverse --list list all reverse socket connections from device reverse [--no-rebind] REMOTE LOCAL reverse socket connection using: tcp: ( may be \"tcp:0\" to pick any open port) localabstract: localreserved: localfilesystem: reverse --remove REMOTE remove specific reverse socket connection reverse --remove-all remove all reverse socket connections from device mdns check check if mdns discovery is available mdns services list all discovered services file transfer: push [--sync] [-z ALGORITHM] [-Z] LOCAL... REMOTE copy local files/directories to device --sync: only push files that are newer on the host than the device -n: dry run: push files to device without storing to the filesystem -z: enable compression with a specified algorithm (any/none/brotli/lz4/zstd) -Z: disable compression pull [-a] [-z ALGORITHM] [-Z] REMOTE... LOCAL copy files/dirs from device -a: preserve file timestamp and mode -z: enable compression with a specified algorithm (any/none/brotli/lz4/zstd) -Z: disable compression sync [-l] [-z ALGORITHM] [-Z] [all|data|odm|oem|product|system|system_ext|vendor] sync a local build from $ANDROID_PRODUCT_OUT to the device (default all) -n: dry run: push files to device without storing to the filesystem -l: list files that would be copied, but don't copy them -z: enable compression with a specified algorithm (any/none/brotli/lz4/zstd) -Z: disable compression shell: shell [-e ESCAPE] [-n] [-Tt] [-x] [COMMAND...] run remote shell command (interactive shell if no command given) -e: choose escape character, or \"none\"; default '~' -n: don't read from stdin -T: disable pty allocation -t: allocate a pty if on a tty (-tt: force pty allocation) -x: disable remote exit codes and stdout/stderr separation emu COMMAND run emulator console command app installation (see also `adb shell cmd package help`): install [-lrtsdg] [--instant] PACKAGE push a single package to the device and install it install-multiple [-lrtsdpg] [--instant] PACKAGE... push multiple APKs to the device for a single package and install them install-multi-package [-lrtsdpg] [--instant] PACKAGE... push one or more packages to the device and install them atomically -r: replace existing application -t: allow test packages -d: allow version code downgrade (debuggable packages only) -p: partial application install (install-multiple only) -g: grant all runtime permissions --abi ABI: override platform's default ABI --instant: cause the app to be installed as an ephemeral install app --no-streaming: always push APK to device and invoke Package Manager as separate steps --streaming: force streaming APK directly into Package Manager --fastdeploy: use fast deploy --no-fastdeploy: prevent use of fast deploy --force-agent: force update of deployment agent when using fast deploy --date-check-agent: update deployment agent when local version is newer and using fast deploy --version-check-agent: update deployment agent when local version has different version code and using fast deploy --local-agent: locate agent files from local source build (instead of SDK location) (See also `adb shell pm help` for more options.) uninstall [-k] PACKAGE remove this app package from the device '-k': keep the data and cache directories debugging: bugreport [PATH] write bugreport to given PATH [default=bugreport.zip]; if PATH is a directory, the bug report is saved in that directory. devices that don't support zipped bug reports output to stdout. jdwp list pids of processes hosting a JDWP transport logcat show device log (logcat --help for more) security: disable-verity disable dm-verity checking on userdebug builds enable-verity re-enable dm-verity checking on userdebug builds keygen FILE generate adb public/private key; private key stored in FILE, scripting: wait-for[-TRANSPORT]-STATE... wait for device to be in a given state STATE: device, recovery, rescue, sideload, bootloader, or disconnect TRANSPORT: usb, local, or any [default=any] get-state print offline | bootloader | device get-serialno print get-devpath print remount [-R] remount partitions read-write. if a reboot is required, -R will will automatically reboot the device. reboot [bootloader|recovery|sideload|sideload-auto-reboot] reboot the device; defaults to booting system image but supports bootloader and recovery too. sideload reboots into recovery and automatically starts sideload mode, sideload-auto-reboot is the same but reboots after sideloading. sideload OTAPACKAGE sideload the given full OTA package root restart adbd with root permissions unroot restart adbd without root permissions usb restart adbd listening on USB tcpip PORT restart adbd listening on TCP on PORT internal debugging: start-server ensure that there is a server running kill-server kill the server if it is running reconnect kick connection from host side to force reconnect reconnect device kick connection from device side to force reconnect reconnect offline reset offline/unauthorized devices to force reconnect usb: attach attach a detached USB device detach detach from a USB device to allow use by other processes environment variables: $ADB_TRACE comma-separated list of debug info to log: all,adb,sockets,packets,rwx,usb,sync,sysdeps,transport,jdwp $ADB_VENDOR_KEYS colon-separated list of keys (files or directories) $ANDROID_SERIAL serial number to connect to (see -s) $ANDROID_LOG_TAGS tags to be used by logcat (see logcat --help) $ADB_LOCAL_TRANSPORT_MAX_PORT max emulator scan port (default 5585, 16 emus) $ADB_MDNS_AUTO_CONNECT comma-separated list of mdns services to allow auto-connect (default adb-tls-connect) adb文档和资料 官网文档 Android 调试桥 (adb) | Android 开发者 | Android Developers 其他资料 Home | Android Debug Bridge (ADB) Commands Manual (adbcommand.com) Listing of adb Commands Android Debug Bridge | Android Developers (oschina.net) crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-10 14:49:22 "},"other_summary/file_manager/":{"url":"other_summary/file_manager/","title":"文件管理","keywords":"","body":"文件管理 TODO： 【记录】从Nox夜神模拟器中拷贝文件到Mac中 【已解决】安卓手机Google Pixel3用文件管理管理文件 【已解决】安卓手机中打开log日志文件查看内容 安卓逆向期间，常涉及到文件管理方面的内容。 文件上传和下载=导入导出文件 用文件管理器 用命令：adb 导出文件adb pull /mnt/sdcard/Download/com.lanyou.bydwj.ikk/ . 导入文件 adb push boot.img /sdcard/Download/boot.img adb push riru-v25.4.4-debug.zip /sdcard/Download 文件目录的关系 常见目录： /sdcard：SD卡根目录，即普通用户保存文件的根目录 /sdcard/Download：下载目录 安卓手机中，通过浏览器等工具下载的文件，往往默认保存在到下载目录，就是这个：/sdcard/Download 对应的查看效果： 文件管理器 文件极客 命令行 adb shellcrifan@licrifandeMacBook-Pro  ~/dev/dev_tool/android/EdXposed  adb shell blueline:/ $ whoami shell blueline:/ $ cd /sdcard/Download blueline:/sdcard/Download $ ls -lh total 120M -rw-rw---- 1 root everybody 14M 2022-09-15 15:30 EdXposed-v0.5.2.2_4683-master-z-debug.zip -rw-rw---- 1 root everybody 96K 2022-09-15 10:02 MagiskHidePropsConf-v6.1.2.zip -rw-rw---- 1 root everybody 64M 2009-01-01 00:00 boot.img -rw-rw---- 1 root everybody 97M 2022-08-31 11:16 com.google.android.youtube_16.29.36.apk -rw-rw---- 1 root everybody 44K 2022-09-14 17:12 magisk_log_2022-09-14T17.12.35.log -rw-rw---- 1 root everybody 64M 2022-09-14 17:18 magisk_patched-25200_lOhGo.img crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-10 14:49:53 "},"other_summary/file_manager/file_manager_app.html":{"url":"other_summary/file_manager/file_manager_app.html","title":"文件管理器","keywords":"","body":"文件管理器 TODO： 【已解决】安卓手机Google Pixel3用文件管理管理文件 【已解决】安卓手机中打开log日志文件查看内容 【部分解决】安卓手机Google Pixel3中用RE文件管理器拷贝和移动文件夹 【已解决】导出安卓手机Google Pixel3中的文件 【未解决】安卓手机Google Pixel3中用ES文件管理器拷贝和移动文件夹 apk安装 【已解决】安卓手机中安装YouTube的apk报错：应用未安装 【已解决】安卓中把微信传输收到的apk.1改名为apk去掉.1的后缀 【无需解决】Android 9的Google Pixel3中安装apk报错应用未安装：可能和sdkVersion有关 【已解决】安卓手机Google Pixel3中用ES文件管理器安装youtube的apk 【已解决】Google Pixel3中如何彻底卸载提示未针对此用户安装的YouTube应用 【已解决】安卓手机Google Pixel3中安装apk应用 【未解决】用腾讯手机管家的APK安装器安装安卓apk应用 Android的文件管理器 推荐：文件管理 应用宝中搜文件管理，而找到的 其他可选 ES文件管理器 RE MT管理器 安卓模拟器中的文件管理器 夜神模拟器中自带文件浏览器 常见的用途 给文件改名 xxx.apk.1 -> xxx.apk 查找文件 再去安装apk文件 查看文件内容 查看log日志内容 MT管理器 MT=MT管理器=MT Manager=MT Manager for Android 是什么：安卓中的一个文件管理器 常被简称为：MT2 因为最新版本是v2 比如： MT浏览器_V2.5.4.apk 文件管理器 文件管理神器 MT Manager v2.6.1 for Android MT管理器2.0 特点 支持在VirtualXposed中使用MT 除了普通文件管理功能外，还支持APK反编译相关功能 应用简介 MT管理器是一款强大的文件管理工具和APK逆向修改神器。 如果你喜欢它的双窗口操作风格，可以单纯地把它当成文件管理器使用。 如果你对修改APK有深厚的兴趣，那么你可以用它做许许多多的事 例如汉化应用、替换资源、修改布局、修改逻辑代码、资源混淆、去除签名校验等，主要取决于你如何使用。 主要功能 文件复制、移动、创建软链接、重命名、删除、创建文件(夹)，文件批量操作。获取 Root 权限后可访问系统目录，挂载文件系统为读写，修改文件权限和所有者。 像 WinRAR 那样打开 ZIP 格式文件，可以对 ZIP 内的文件进行删除、重命名、移动，添加/替换外部文件到 ZIP 中，无需解压后再重新打包，同时支持单独解压 ZIP 内的部分文件。 自带强大的文本编辑器，可以流畅编辑大文本文件，支持设置是否显示行号、开关自动换行、双指缩放字体大小、自动识别编码、代码语法高亮、自动缩进、正则搜索替换。 拥有图片查看、音乐播放、字体预览、执行脚本、文本对比等功能，在侧拉栏中可方便地查看存储设备、FTP连接、书签、后台、工具等。 APK 编辑功能，主要有 DEX 编辑，ARSC 编辑，XML 编辑，APK 签名、APK 优化、APK 共存、去除签名校验、RES 资源混淆、RES 反资源混淆、翻译模式等。 截图举例 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-10 14:51:08 "},"other_summar/doc_refer/":{"url":"other_summar/doc_refer/","title":"相关资料","keywords":"","body":"相关资料 DDMS Using Dalvik Debug Monitor Service (DDMS) | Android Developers (sourceforge.net) Using DDMS | Android Developers (android-doc.github.io) 常见安卓模拟器的调试端口 https://developer.android.com 安卓 调试 debug 调试应用 | Android 开发者 | Android Developers Android Device Monitor Android Device Monitor | Android 开发者 | Android Developers crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 17:46:33 "},"other_summar/doc_refer/api_level.html":{"url":"other_summar/doc_refer/api_level.html","title":"Android API Level","keywords":"","body":"Android API Level Android的API Level、sdkVersion API Levels | Android versions, SDK/API levels, version codes, codenames, and cumulative usage crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 17:47:51 "},"sub_tutorial/":{"url":"sub_tutorial/","title":"子教程","keywords":"","body":"子教程 TODO： 【未解决】给OPPO R11s刷第三方Recovery：TWRP 【整理】安卓root工具：Magisk 【已解决】给Android 11的Google Pixel3去开启root权限 安卓逆向开发的子教程 逆向调试 概述 主要是用Android Studio去调试apk导出的smali代码 辅助用frida配合调试逻辑 详见 Android逆向：动态调试 (crifan.org) Android逆向：重新打包apk (crifan.org) Android逆向：开启root (crifan.org) crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-09 11:09:58 "},"appendix/":{"url":"appendix/","title":"附录","keywords":"","body":"附录 下面列出相关参考资料。 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 16:42:54 "},"appendix/reference.html":{"url":"appendix/reference.html","title":"参考资料","keywords":"","body":"参考资料 YouTube 安卓逆向 逆向思路 【整理】安卓逆向：相关资料 【整理】安卓逆向：开发心得 【整理】adb命令语法帮助信息 Creating a URL (The Java™ Tutorials > Custom Networking > Working with URLs) (oracle.com) Java URL class- javatpoint A Simple Guide to the Java URL | Baeldung java - Create URL from a String - Stack Overflow Android逆向破解：使用Android Studio调试反编译后的smali代码 - 简书 (jianshu.com) 什么刷机软件最好用(oppo手机用什么刷机软件好用) - 52FMZ资讯网 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 17:59:13 "}}