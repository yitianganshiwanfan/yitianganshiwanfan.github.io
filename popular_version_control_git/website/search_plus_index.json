{"./":{"url":"./","title":"前言","keywords":"","body":"最流行的版本管理系统：Git 最新版本：v0.4 更新时间：20210421 简介 介绍目前最流行的版本控制管理系统git。先概述git，再介绍基本操作，包括代码的提交、同步、撤销等；详细介绍git的配置，包括config和.gitignore，尤其是config有本地和全局，及其相关的配置文件，以及如何查看和修改配置。且对于常见的git的代理操作给出了详细的解释和操作；另外给出常见的操作，比如新建仓库后如何操作、记住密码、迁移仓库且保留历史记录；以及整理了一些常见问题；整理出git相关应用，相关的支持、git的IDE、在线的git仓库系统等。最后给出相关教程。 源码+浏览+下载 本书的各种源码、在线浏览地址、多种格式文件下载如下： Gitbook源码 crifan/popular_version_control_git: 最流行的版本管理系统：Git 如何使用此Gitbook源码去生成发布为电子书 详见：crifan/gitbook_template: demo how to use crifan gitbook template and demo 在线浏览 最流行的版本管理系统：Git book.crifan.com 最流行的版本管理系统：Git crifan.github.io 离线下载阅读 最流行的版本管理系统：Git PDF 最流行的版本管理系统：Git ePub 最流行的版本管理系统：Git Mobi 版权说明 此电子书教程的全部内容，如无特别说明，均为本人原创和整理。其中部分内容参考自网络，均已备注了出处。如有发现侵犯您版权，请通过邮箱联系我 admin 艾特 crifan.com，我会尽快删除。谢谢合作。 鸣谢 感谢我的老婆陈雪的包容理解和悉心照料，才使得我crifan有更多精力去专注技术专研和整理归纳出这些电子书和技术教程，特此鸣谢。 更多其他电子书 本人crifan还写了其他100+本电子书教程，感兴趣可移步至： crifan/crifan_ebook_readme: Crifan的电子书的使用说明 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:42:48 "},"git_overview/":{"url":"git_overview/","title":"Git概述","keywords":"","body":"Git概述 常见版本控制软件 版本管理=版本控制的工具和软件，历史上有很多 之前听说或用过的有： 很早的：perforce 后来的：svn 最新的：git 大体区别如下： crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:46 "},"basic_operation/":{"url":"basic_operation/","title":"基本操作","keywords":"","body":"Git基本操作 代码提交和同步代码 最常见的基本操作： 概述 详解 最基本的三步：新增并上传文件 添加文件 git add 提交 git commit 推送 = 上传到远端仓库 git push 更新文件 2步 下载新文件 git fetch 合并新文件 git merge 或：直接1步 下载并合并 git pull 代码撤销和撤销同步 相对高级一些的操作： 查看远程仓库url地址 git remote -v crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:08 "},"git_settings/":{"url":"git_settings/","title":"git设置","keywords":"","body":"git设置 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:37:03 "},"git_settings/gitignore.html":{"url":"git_settings/gitignore.html","title":".gitignore","keywords":"","body":".gitignore .gitignore 是什么：一个普通文件 作用：描述了git系统需要排除ignore哪些文件 位置： 最常见：git仓库根目录 也可以：放在git仓库的任何子目录中 常见问题 排除掉其他所有，但只包含某个子目录中内容 举例1 希望：忽略掉所有子目录中，所有txt文件 但是不排除，即包含other/searchGameAutomation目录中的所有txt文件 .gitignore的写法*.txt !other/searchGameAutomation/**/*.txt 效果 举例2 希望：排除掉books下面所有的子文件夹 但是只保留books/gitbook_demo .gitignore的写法# exclude all in books books/**/* # include only single subfolder: gitbook_demo !books/gitbook_demo 效果 相应的git status就没了那么多books了 排除项目根目录下data文件夹而保留某子文件夹中data文件夹 .gitigonre的配置： /data 即可实现： 只排除掉项目根目录下的data文件夹 但保留其他子文件夹中的data目录 效果： warning:: 不要误写成data/ 如果误写成data/，则会： 排除掉所有的 data文件夹 除了会排除掉项目根目录下的data文件夹 也会排除掉其他子文件夹中的data目录 另外： info:: fabric中也是类似的逻辑 fabric中利用patchwork的rsync去同步，在添加exclude参数，要排除掉的文件或文件夹时，语法也是类似的： 如果用/data，则也会导致子文件中的data目录被排除掉 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:37:01 "},"git_settings/git_config/":{"url":"git_settings/git_config/","title":"git的config","keywords":"","body":"git的config git的配置 配置类型有2种 本地的 对应文件：.git/config 即当前.git目录下的config文件 命令行设置方式：不加--global 举例 查看本地配置git config --list 取消本地代理git config --unset http.proxy 会把.git/config中的http的proxy部分删除掉 全局的 对应文件：~/.gitconfig 命令行设置方式：加--global 举例 查看全局配置git config --global --list 取消全局代理git config --global --unset http.proxy 会把~/.gitconfig中的http的proxy部分删除掉 生效关系 优先级：本地 > 全局 即：本地的配置会覆盖全局的配置 配置的修改方式也有2种 直接修改配置文件 本地配置：修改.git/config 全局配置：修改~/.gitconfig 命令行方式设置参数 添加代理 添加本地代理 git config http.proxy socks5://127.0.0.1:1086 添加全局代理 git config --global http.proxy socks5://127.0.0.1:1086 取消代理 取消本地代理 git config --unset http.proxy 取消全局代理 git config --global --unset http.proxy crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:58 "},"git_settings/git_config/add_proxy.html":{"url":"git_settings/git_config/add_proxy.html","title":"给git加代理","keywords":"","body":"给git加代理 有时候由于科学上网、下载速度慢等原因，需要去给git添加代理实现加速。 此处和Git的代理相关的操作有： 查看代理 设置代理=添加代理 取消代理 下面详细解释如何操作： 注：假如要设置的代理地址是：socks5://127.0.0.1:1086 查看（当前是否使用）代理 查看本地代理 方式 命令行git config http.proxy 配置文件方式cat .git/config 结果 可以看到：是否有http部分，http中是否有proxy，proxy是否为空 查看全局代理 方式 命令行git config --global http.proxy 配置文件方式cat ~/.gitconfig 结果 可以看到：是否有http部分，http中是否有proxy，proxy是否为空 设置（添加）代理 设置本地代理 方式 命令行git config http.proxy socks5://127.0.0.1:1086 配置文件vi .git/config 加上：http的proxy的值是socks5://127.0.0.1:1086[http] proxy = socks5://127.0.0.1:1086 设置全局代理 方式 命令行git config --global http.proxy socks5://127.0.0.1:1086 配置文件vi ~/.gitconfig 加上：http的proxy的值是socks5://127.0.0.1:1086[http] proxy = socks5://127.0.0.1:1086 取消代理 取消本地代理 方式 命令行git config --unset http.proxy 配置文件vi .git/config 方式1：去掉http的proxy[http] 方式2：设置proxy值是空[http] proxy = 取消全局代理 方式 命令行git config --global --unset http.proxy 配置文件vi ~/.gitconfig 方式1：去掉http的proxy[http] 方式2：设置proxy值是空[http] proxy = 背景知识 关于自己电脑中可以使用的代理 本地电脑中可以使用的代理，往往是像我一样，开了科学上网的工具（SS/SSR/Trojan等），所以有了： （默认开启的）Socks5代理 举例：socks5://127.0.0.1:1086 自己Mac中的ShadowsocksX-NG的R版1.4.4-R8 (1) 高级设置->本地Sock5监听 地址和端口，分别是127.0.0.1和1086 所以Socks5的代理地址就是： socks5://127.0.0.1:1086 （默认没开启，要自己手动开启的）http代理 举例：http://127.0.0.1:1087 自己Mac中的ShadowsocksX-NG的R版1.4.4-R8 (1) HTTP代理设置->勾选：HTTP代理开启，以及HTTP代理监听地址和端口，分别是127.0.0.1和1087 所以http的代理地址就是： http://127.0.0.1:1087 注意事项 git的代理没有https的proxy，只有http的proxy 后经git官网证实： 结论：只有http的proxy，没有https的proxy 解释 （很多人）以为 http.proxy只针对 http://xxx 的http的网址 https.proxy只针对 https://xxx 的https的网址 比如常见的 https://github.com/xxx https://gitee.com/xxx 其实：此处http.proxy中的 http：指的是HTTP协议，包括http和https的网址 proxy：指的是代理，都加上代理 所以： 即使是（ https://github.com 、https://gitee.com 等）https的git的url地址，也是http的proxy，而不是https的proxy 没有 命令行中的写法git config https.proxy 配置文件 包括 本地的：.git/config 全局的：~/.gitconfig 中的写法[https] proxy = xxx 只有 命令行中的写法：git config http.proxy 配置文件 包括 本地的：.git/config 全局的：~/.gitconfig 中的写法[http] proxy = xxx 特殊设置 单独针对某些git仓库=url 单独启用代理 或者 单独不用代理 举例：只给GitHub启用代理，其他不用代理 注：GitHub的地址是： https://github.com 命令行方式 本地代理git config http.https://github.com.proxy socks5://127.0.0.1:1086 全局代理git config --global http.https://github.com.proxy socks5://127.0.0.1:1086 配置文件方式 编辑配置文件 本地vi .git/config 全局vi ~/.gitconfig 文件内容[http \"https://github.com\"] proxy = socks5://127.0.0.1:1086 举例：其他全部启用代理（包括github），而gitee不用代理 命令行方式 本地git config http.proxy socks5://127.0.0.1:1086 git config http.https://gitee.com.proxy '' 全局git config --global http.proxy socks5://127.0.0.1:1086 git config --global http.https://gitee.com.proxy '' 配置文件方式 编辑配置文件 本地vi .git/config 全局vi ~/.gitconfig 文件内容[http] proxy = socks5://127.0.0.1:1086 [http \"https://gitee.com/\"] proxy = crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:51 "},"common_operation/":{"url":"common_operation/","title":"常见操作","keywords":"","body":"常见操作 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:29 "},"common_operation/how_operate_for_created.html":{"url":"common_operation/how_operate_for_created.html","title":"新建仓库后如何操作","keywords":"","body":"新建仓库后如何操作 新建git项目后，如何操作 简易的命令行入门教程: Git 全局设置: git config --global user.name \"CrifanLi\" git config --global user.email \"crifan.li@xxx.com\" 创建 git 仓库： mkdir see_empty_project_git cd see_empty_project_git git init touch README.md git add README.md git commit -m \"first commit\" git remote add origin https://gitee.com/naturling_crifan/see_empty_project_git.git git push -u origin master 已有项目 = 把当前代码加到已有项目 cd existing_git_repo git remote add origin https://gitee.com/naturling_crifan/see_empty_project_git.git git push -u origin master 举例：EvernoteToWordpress crifan/EvernoteToWordpress 简易的命令行入门教程: Git 全局设置: git config --global user.name \"crifan\" git config --global user.email \"admin@crifan.com\" 创建 git 仓库: mkdir EvernoteToWordpress cd EvernoteToWordpress git init touch README.md git add README.md git commit -m \"first commit\" git remote add origin https://gitee.com/crifan/EvernoteToWordpress.git git push -u origin master 已有仓库? cd existing_git_repo git remote add origin https://gitee.com/crifan/EvernoteToWordpress.git git push -u origin master crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:19 "},"common_operation/remember_pwd.html":{"url":"common_operation/remember_pwd.html","title":"记住密码","keywords":"","body":"记住密码 git config --global credential.helper store 之后，正常git操作，比如： git pull 输入账号和密码 -> git就会记住了 -> 下次再git操作，就不用再输入账号和密码了 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:32 "},"common_operation/move_project.html":{"url":"common_operation/move_project.html","title":"迁移仓库且保留历史记录","keywords":"","body":"迁移仓库且保留历史记录 之前遇到过个需求：迁移仓库 整体迁移 且保留所有历史提交记录 想要把git仓库，整体迁移，且保留全部历史commit提交记录，步骤是： git clone --mirror old-repo-url new-repo cd new-repo git remote remove origin git remote add origin new-repo-url git push --all git push --tags 说明： 此处的： git clone --mirror temp-dir 等价于： git clone temp-dir git branch -a git checkout branch-name git fetch --tags git tag git branch -a 后记：确认和验证新仓库代码是正常的 cd .. rm -rf new-repo git clone new-repo-url new-repo 其中：把new-repo-url和 new-repo 换成你自己的仓库 举例：迁移appcrawler 此处自己的操作： 以镜像方式下载复制代码 git clone --mirror http://xxx.xxx.com:yyy/data/data_limao/appcrawler.git appcrawler warning:: 下载后是git相关文件，而不是源码 此处下载后，本地文件夹中看到的内容，不是源码，而是git的一些文件： cd appcrawler.git limao@xxx  ~/dev/xxx/gitlab/transfer/appcrawler.git   master  ll total 32 -rw-r--r-- 1 limao CORP\\Domain Users 23B 7 15 15:23 HEAD -rw-r--r-- 1 limao CORP\\Domain Users 238B 7 15 15:23 config -rw-r--r-- 1 limao CORP\\Domain Users 73B 7 15 15:23 description drwxr-xr-x 13 limao CORP\\Domain Users 416B 7 15 15:23 hooks drwxr-xr-x 3 limao CORP\\Domain Users 96B 7 15 15:23 info drwxr-xr-x 4 limao CORP\\Domain Users 128B 7 15 15:23 objects -rw-r--r-- 1 limao CORP\\Domain Users 105B 7 15 15:23 packed-refs drwxr-xr-x 4 limao CORP\\Domain Users 128B 7 15 15:23 refs -> 不要和我之前一样误以为是操作失败了。这是正常的，期望的结果，不是出错了。 删除本地的远端的分支 cd appcrawler git remote remove origin 其中会有提示，意思好像是需要你主动删除原有分支？总之可以忽略不管。 注： git remote remove origin 的另一种写法： git remote rm origin 添加远端地址为新仓库 git remote add origin http://fibodtidc.corp.com:12310/data_limao/appcrawler.git 提交上传所有代码和标签 上传所有代码： git push --all 或 先 git push origin --all 和 所有标签：git push --tags crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:26 "},"common_issues/":{"url":"common_issues/","title":"常见问题","keywords":"","body":"常见问题 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:15 "},"common_issues/empty_reply.html":{"url":"common_issues/empty_reply.html","title":"unable to access Empty reply from server","keywords":"","body":"unable to access Empty reply from server 问题 在git pull或git push，报错： fatal: unable to access Empty reply from server 原因 可能的原因有多种，比如网络断了等等。 此处遇到一种情况，其原因是： 当前git仓库是只允许内网访问，此处开启了代理，导致无法访问而报错 解决办法：去掉代理 操作步骤 清除git的本地代理 git config --unset http.proxy 清除git的全局代理 git config --global --unset http.proxy info:: 查看git代理 查看git当前（本地）代理 git config http.proxy 查看git全局代理 git config --global http.proxy crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:12 "},"git_application/":{"url":"git_application/","title":"git应用","keywords":"","body":"git应用 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:42 "},"git_application/support_git.html":{"url":"git_application/support_git.html","title":"相关支持","keywords":"","body":"相关支持 zsh中对于git支持的很好 zsh在安装了插件后，对于git支持的很好 甚至包括：当auto-merge出现conflict冲突时，git status的前缀都自动显示出 >M  master ●✚ >M 表示有内容需要合并（后才能再去提交） 此处表明，细节支持的很到位。 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:44 "},"git_application/git_ide.html":{"url":"git_application/git_ide.html","title":"git的IDE","keywords":"","body":"git的IDE crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:35 "},"git_application/online_git_repo.html":{"url":"git_application/online_git_repo.html","title":"在线git仓库","keywords":"","body":"在线git仓库 github gitee = 码云 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:39 "},"appendix/":{"url":"appendix/","title":"附录","keywords":"","body":"附录 下面列出相关参考资料。 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:35:53 "},"appendix/related_tutorial.html":{"url":"appendix/related_tutorial.html","title":"相关教程","keywords":"","body":"相关教程 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:36:02 "},"appendix/reference.html":{"url":"appendix/reference.html","title":"参考资料","keywords":"","body":"参考资料 【已解决】给蝉大师搜索塔防结果的任务列表根据三国类关键字优先排序 【已解决】git中.gitignore中如何配置某文件夹下排除所有但只包含某子文件夹 【已解决】Gitlab仓库git pull报错fatal: unable to access Empty reply from server 【已解决】Gitlab中尝试用clone加mirror参数实现git仓库整体迁移且带历史提交日志 【已解决】Gitlab的旧git仓库迁移到新仓库且保留commit历史记录 【规避解决】Mac中给git添加加一次的当前的临时代理 【已解决】mac中git push只对github用代理而对gitee不用代理 【已解决】gitlab的仓库git push报错：fatal unable to access Empty reply from server 【已解决】git和fabric中排除项目根目录下data文件夹而保留某子文件夹中data文件夹 【已解决】git记住密码不要每次都提示输入 crifan/EvernoteToWordpress 版本控制系统SVN、Git、Perforce区别 - 简书 【开发工具】最强Git使用总结 - pdai - 博客园 github - Only use a proxy for certain git urls/domains? - Stack Overflow Git - git-config Documentation git 设置和取消代理 帮助 - Wiki - 码云 Gitee.com 如何导入外部Git仓库到中国源代码托管平台（Git@OSC） - 开源中国 crifan.com，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2021-04-21 20:35:58 "}}