{"./":{"url":"./","title":"前言","keywords":"","body":"iOS逆向YouTube：protobuf逆向 最新版本：v0.7 更新时间：20221104 简介 整理iOS逆向YouTube期间涉及到的Protobuf的逆向。先是概览；再是Protobuf的正向相关知识；然后是Protobuf逆向内容，包括普通的iOS的类、lite精简版的C++的类、YouTube中Protobuf的内容；其中，普通的iOS的类有GPBMessage、GPBDescriptor、GPBFieldDescriptor；lite精简版C++的类有MessageLite；YouTube中的普通的iOS类的Protobuf类有：YTIPlayerRequest、YTIAdBreakRequest、YTIInnerTubeContext，YTIClientInfo，以及lite的C++类有OnesieRequestProto； 源码+浏览+下载 本书的各种源码、在线浏览地址、多种格式文件下载如下： HonKit源码 crifan/ios_re_protobuf_reverse: iOS逆向YouTube：protobuf逆向 如何使用此HonKit源码去生成发布为电子书 详见：crifan/honkit_template: demo how to use crifan honkit template and demo 在线浏览 iOS逆向YouTube：protobuf逆向 book.crifan.org iOS逆向YouTube：protobuf逆向 crifan.github.io 离线下载阅读 iOS逆向YouTube：protobuf逆向 PDF iOS逆向YouTube：protobuf逆向 ePub iOS逆向YouTube：protobuf逆向 Mobi 版权和用途说明 此电子书教程的全部内容，如无特别说明，均为本人原创。其中部分内容参考自网络，均已备注了出处。如发现有侵权，请通过邮箱联系我 admin 艾特 crifan.com，我会尽快删除。谢谢合作。 各种技术类教程，仅作为学习和研究使用。请勿用于任何非法用途。如有非法用途，均与本人无关。 鸣谢 感谢我的老婆陈雪的包容理解和悉心照料，才使得我crifan有更多精力去专注技术专研和整理归纳出这些电子书和技术教程，特此鸣谢。 更多其他电子书 本人crifan还写了其他150+本电子书教程，感兴趣可移步至： crifan/crifan_ebook_readme: Crifan的电子书的使用说明 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:59:00 "},"protobuf_overview/":{"url":"protobuf_overview/","title":"Protobuf概览","keywords":"","body":"Protobuf概览 在iOS逆向YouTube期间，遇到了Protobuf的逆向。 其中涉及到，了解Protobuf的正向内容，和相关逆向内容。 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 14:45:51 "},"protobuf_dev/":{"url":"protobuf_dev/","title":"Protobuf正向","keywords":"","body":"Protobuf正向 TODO： 【整理】Chromium相关：Protobuf源码和文档 【整理】Protocol Buffers中.proto文件写法即protocobuf的语法 【已解决】protobuf中字段规则类型：required和optional protobuf protobuf=Protocol Buffers 概述 Protocol buffers are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data 特点 比JSON、XML等格式，占用体积更小，更快，更简单 是什么：是一系列的组合 = 包含三部分 定义语言：definition language 自己写的：.proto文件 代码=code 需要专门的protocol compiler (对应命令行工具是：protoc)去编译生成对应语言的代码 用于操作数据的代码 运行时：language-specific protobuf runtime libraries 序列化：serialization format for data 写入文件 或：用网络传输 注： 相关名词 序列化=serialize=encode=编码 反序列化=deserialize=parse=解析=decode=解码 支持多种语言 proto2 Java Python Objective-C C++ PHP proto3 Kotlin Dart Go Ruby C# 支持场景 临时短期的网络传输 长期的数据保存 特点 支持扩展extended=extensions Protocol buffers can be extended with new information without invalidating existing data or requiring code to be updated In proto2, messages can allow extensions to define fields outside of the message, itself. For example, the protobuf library's internal message schema allows extensions for custom, usage-specific options. 兼容性好 向后兼容性很好 向前兼容性也很好 无缝的支持： 字段的变化 新增字段 删除字段 使用Protocol Buffers的好处 体积小=占用空间少=数据存储很紧凑 解析速度快 支持多种语言 有各种经过优化的功能（通过编译器生成的类去实现的） protobuf工作流 Protocol buffers workflow proto compiler = protoc 输入：.proto 输出：对应的特定语言的代码 对每个字段和方法，都有一个accessor访问器 用于 在 数据结构 和 二进制数据 之间解析和转换 编译生成的文件 C++：.h和.cc Java：.java Kotlin：.kt Python：生成内容是一个模块module，放在.proto文件中 Go：.pb.go Ruby：.rb Objective-C：pbobjc.h和pbobjc.m C#：.cs Dart：.pb.dart 相关 google内部常用到的一些protobuf定义 timestamp protobuf/timestamp.proto at main · protocolbuffers/protobuf (github.com) status googleapis/status.proto at master · googleapis/googleapis (github.com) 文档和代码 详见： 【整理】Chromium相关：Protobuf源码和文档 protobuf举例 .proto定义： message Person { required string name = 1; required int32 id = 2; optional string email = 3; } -》序列化：Java 写入文件： Person john = Person.newBuilder() .setId(1234) .setName(\"John Doe\") .setEmail(\"jdoe@example.com\") .build(); output = new FileOutputStream(args[0]); john.writeTo(output); -》反序列化：C++解析 Person john; fstream input(argv[1], ios::in | ios::binary); john.ParseFromIstream(&input); id = john.id(); name = john.name(); email = john.email(); 更多例子： examples - external/github.com/google/protobuf - Git at Google (googlesource.com) crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:38:42 "},"protobuf_re/":{"url":"protobuf_re/","title":"Protobuf逆向","keywords":"","body":"Protobuf逆向 TODO： 【记录】Protobuf的full和lite的Message正向和逆向机制对比 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 14:50:13 "},"protobuf_re/normal_ios/":{"url":"protobuf_re/normal_ios/","title":"普通的iOS类","keywords":"","body":"普通的iOS类 TODO： 【未解决】Protobuf的iOS的ObjC版的lite的库即runtime运行时 【未解决】iOS的ObjC的protobuf的sample示例的正向编译和逆向尝试 【已解决】protobuf逆向：已有data如何获取子属性子字段的data 【已解决】protobuf逆向：iOS端无需data直接解析protobuf类的字段定义 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:43:08 "},"protobuf_re/normal_ios/gpbmessage.html":{"url":"protobuf_re/normal_ios/gpbmessage.html","title":"GPBMessage","keywords":"","body":"GPBMessage TODO： 【未解决】研究YouTube逻辑：GPBMessage的data 【已解决】研究YouTube逻辑：GPBMessage 【已解决】研究YouTube逻辑：关于GBPMessage子类中protobuf属性字段和顺序的相关理解 【未解决】研究YouTube逻辑：GPBMessage的parseFromData crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:32:00 "},"protobuf_re/normal_ios/gpbdescriptor.html":{"url":"protobuf_re/normal_ios/gpbdescriptor.html","title":"GPBDescriptor","keywords":"","body":"GPBDescriptor TODO： 【未解决】研究YouTube逻辑：GPBDescriptor crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 14:49:13 "},"protobuf_re/normal_ios/gpbfielddescriptor.html":{"url":"protobuf_re/normal_ios/gpbfielddescriptor.html","title":"GPBFieldDescriptor","keywords":"","body":"GPBFieldDescriptor TODO： 【已解决】研究YouTube逻辑：GPBFieldDescriptor crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 14:52:38 "},"protobuf_re/lite_cpp/":{"url":"protobuf_re/lite_cpp/","title":"lite的C++类","keywords":"","body":"lite的C++类 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:43:02 "},"protobuf_re/lite_cpp/messagelite.html":{"url":"protobuf_re/lite_cpp/messagelite.html","title":"MessageLite","keywords":"","body":"MessageLite TODO： 【整理】Protobuf中的MessageLite crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 14:53:39 "},"protobuf_re/youtube/":{"url":"protobuf_re/youtube/","title":"YouTube中Protobuf","keywords":"","body":"YouTube中Protobuf TODO： 【已解决】研究YouTube逻辑：protobuf中搜索内容对应的可能的字符串编码 【未解决】研究YouTube逻辑：protobuf的逆向 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 14:53:25 "},"protobuf_re/youtube/normal_ios/":{"url":"protobuf_re/youtube/normal_ios/","title":"普通的iOS类","keywords":"","body":"普通的iOS类 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:44:28 "},"protobuf_re/youtube/normal_ios/ytiplayerrequest.html":{"url":"protobuf_re/youtube/normal_ios/ytiplayerrequest.html","title":"YTIPlayerRequest","keywords":"","body":"YTIPlayerRequest TODO： 【未解决】研究YouTube逻辑：YTIPlayerRequest的descriptor 【未解决】研究YouTube逻辑：YTIPlayerRequest的context的protobuf的number不一致 【已解决】研究YouTube逻辑：通过GPBFieldDescriptor调试出YTIPlayerRequest的protobuf的属性字段定义 推导出YTIPlayerRequest的protobuf的字段定义，大概类似于： message YTIPlayerRequest { YTIInnerTubeContext *context = 1; NSString *videoId = 2; _Bool contentCheckOk = 3; YTIPlaybackContext *playbackContext = 4; _Bool racyCheckOk = 5; NSString *id_p = 6; NSString *t = 7; _Bool forOffline = 8; NSString *playlistId = 9; int playlistIndex = 10; unsigned int startTimeSecs = 11; NSString *params = 12; ??? = 13; NSData *offlineSharingWrappedKey = 14; GPBInt32Array *installedSharingServiceIdsArray = 15; YTIPlayerAttestationRequestData *attestationRequest = 16; NSString *referringApp = 17; NSString *referrer = 18; NSString *serializedThirdPartyEmbedConfig = 19; _Bool proxiedByOnesie = 20; ??? = 21; NSString *hostAppToken = 22; NSString *cpn = 23; ??? = 24; _Bool overrideMutedAtStart = 25; YTIPlayerRequestCaptionParams *captionParams = 26; ??? = 27; YTIPlayerRequestVideoQualitySettingParams *videoQualitySettingParams = 28; } crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:33:52 "},"protobuf_re/youtube/normal_ios/ytiadbreakrequest.html":{"url":"protobuf_re/youtube/normal_ios/ytiadbreakrequest.html","title":"YTIAdBreakRequest","keywords":"","body":"YTIAdBreakRequest TODO： 【已解决】研究YouTube逻辑：从data解析出YTIAdBreakRequest所有的字段属性的值 【未解决】研究YouTube逻辑：获取YTIAdBreakRequest所有的字段的定义即name和number映射关系 【已解决】研究YouTube逻辑：protobuf类YTIAdBreakRequest 想要从protobuf的类YTIAdBreakRequest序列化后的NSData数据data，去解析出： 对应的所有属性的值，包括嵌套的子属性的值 思路是： YTIAdBreakRequest的基类=父类是GPBMessage，其中有Class级别的函数： + (id)parseFromData:(id)arg1; 所以可以直接拿来解析。 具体写法： po [objc_getClass(\"YTIAdBreakRequest\") parseFromData: newHttpBodyData] 即可得到： 整个protobuf类YTIAdBreakRequest的所有属性的值，包括嵌套的属性。 举例： 输入：二进制的data (lldb) po newHttpBodyData 解析 po [objc_getClass(\"YTIAdBreakRequest\") parseFromData: newHttpBodyData] 输出：json格式的Protobuf数据 (lldb) po [objc_getClass(\"YTIAdBreakRequest\") parseFromData: newHttpBodyData] 2022-10-17 11:43:58.552972+0800 YouTube[21038:2204921] hook_ youtubeReqResp.xm YTIInnerTubeContext$descriptor: curDesc= 2022-10-17 11:43:58.553697+0800 YouTube[21038:2204921] hook_ youtubeReqResp.xm YTIInnerTubeContext$descriptor: curDesc= 2022-10-17 11:43:58.713094+0800 YouTube[21038:2204921] hook_ youtubeReqResp.xm YTIInnerTubeContext$descriptor: curDesc= : { context { client { hl: \"zh-CN\" gl: \"CN\" carrier_geo: \"CN\" device_make: \"Apple\" device_model: \"iPhone9,1\" client_name: IOS client_version: \"17.08.2\" os_name: \"iOS\" os_version: \"13.3.1.17D50\" screen_width_points: 375 screen_height_points: 667 screen_pixel_density: 2 client_form_factor: SMALL_FORM_FACTOR window_width_points: 375 window_height_points: 667 connection_type: CONN_WIFI config_info { cold_config_data: \"CMaZqJoGEOrKrgUQqM-oFxDUg64FEPeIrgUQ4rmuBRDS3K0FEOqdrQUQmcauBRDFmq4FEMaFrQUQl9CuBRCD0K4FEIjprQUQuIuuBRDtiq0FEKXvrQUQ2butBRCGoa4FEObNrgUQlM-uBRDrma0FEIzyrQUQp52uBRDXka0FEJjUrQUQxb2uBRCCta4FEOTKrgUQgcWtBRDfzq4FEMexrQUQ2LyuBRDX9a0FENvKrgUQ78iuBRDql6wFEImxrgUQgbiuBRD7zq4FEJaarQUQmr6uBRD1lq4FEIGGrgUQ0_GtBRCboK4FEKH9rQUQoLmuBRDN4K0FEJPQrgUQnv2tBRDr5K0FEIa1rgUQ6rqtBRCGy64FEOTNrgUQ9MetBRClsK4FGjJBS3BlZGh5TTV0VkN1QW92c01TUmRuajdibF80RmhENmpMWnZUY2E5RXRSOGhGVkRRQSIyQUtwZWRoeU01dFZDdUFvdnNNU1Jkbmo3YmxfNEZoRDZqTFp2VGNhOUV0UjhoRlZEUUEqGENBTVNEQTBENk0tcEFoVUQ4dDNYREE9PQ%3D%3D\" cold_hash_data: \"CJPwspoGEhMyOTA4MTIwNDgzNTkxNTk3NTU0GMaZqJoGKJnGrgUozeCtBSiGta4FKOTKrgUojPKtBSj0x60FKKWwrgUo5s2uBSjZu60FKJugrgUooLmuBSjrma0FKJTPrgUog9CuBSiavq4FKLiLrgUol9CuBSiI6a0FKNi8rgUo6p2tBSj1lq4FKNSDrgUo6pesBSiBuK4FKOrKrgUo94iuBSioz6gXKImxrgUoxb2uBSjkza4FKNeRrQUohsuuBSinna4FKJPQrgUo6rqtBSiCta4FKIHFrQUoof2tBSiGoa4FKNPxrQUo7YqtBSie_a0FKJjUrQUolpqtBSjGha0FKIGGrgUope-tBSjS3K0FKNf1rQUox7GtBSjFmq4FKPvOrgUo78iuBSjbyq4FKN_OrgUo4rmuBSjr5K0FMjJBS3BlZGh5TTV0VkN1QW92c01TUmRuajdibF80RmhENmpMWnZUY2E5RXRSOGhGVkRRQToyQUtwZWRoeU01dFZDdUFvdnNNU1Jkbmo3YmxfNEZoRDZqTFp2VGNhOUV0UjhoRlZEUUFCGENBTVNEQTBENk0tcEFoVUQ4dDNYREE9PQ%3D%3D\" hot_hash_data: \"CJPwspoGEhQxNDIwOTM5NzAxNjAzODg3NTExMRiT8LKaBiiyiP4SKLzK_RIo34z-EiiAgv4SKO2E_hIo89_9EijLrf0SKL6J_hIo1YL-EiiSiv4SKIrg_RIo3o3-EijJhP4SKKTE_RIon4f-EiiA8_0SKMH-_RIopdD9EiiU5PwSKOK__RIogYL9EiiPjP4SKNPe_RIolPD9EijKh_4SKMWO_hIo5YD-EijJ-f0SKNGf_RIo54L-Eij53v0SKOiC_hIo3OD9EijhrP0SKNLL_RIonv_8Eijbk_0SKNyK_hIowIP-Eii93v0SKP2s_RIoy-z9EijbgP4SKKf8_RIoqrT9EijGsv0SKKmq_RIomcb9Eii8vv0SKJvM_RIo-Iv-EijOwP0SKIeC_hIoj4X-Eii59fwSKNfM_RIohaz9EijK2P0SMjJBS3BlZGh5TTV0VkN1QW92c01TUmRuajdibF80RmhENmpMWnZUY2E5RXRSOGhGVkRRQToyQUtwZWRoeU01dFZDdUFvdnNNU1Jkbmo3YmxfNEZoRDZqTFp2VGNhOUV0UjhoRlZEUUFCHENBTVNFUTBCb3RmNkZad3BGUURkejhJTW5jd0U%3D\" } screen_density_float: 2 utc_offset_minutes: 480 user_interface_theme: USER_INTERFACE_THEME_LIGHT time_zone: \"Asia/Shanghai\" eml_template_context: \" \\345\\211\\377\\317\\331\\253\\214\\373\\222\\001 \\203\\370\\325\\224\\370\\330\\256\\322V \\325\\301\\314\\367\\223\\207\\327\\373U \\276\\204\\207\\214\\212\\376\\360\\304\\347\\001 \\331\\335\\220\\314\\314\\204\\217\\363\\200\\001 \\332\\336\\224\\374\\252\\254\\271\\220Y \\306\\272\\225\\227\\264\\371\\311\\263a \\206\\362\\253\\252\\224\\317\\256\\355 \\305\\305\\224\\210\\315\\337\\377\\207\\232\\001 \\342\\241\\300\\260\\346\\337\\227\\362/ \\235\\241\\315\\245\\210\\324\\374\\360~r \\204\\212\\323\\354\\215\\334\\334\\237% \\224\\254\\365\\225\\232\\273\\266\\302\\205\\001 \\347\\256\\222\\356\\346\\361\\352\\266\\311\\001 \\267\\333\\323\\232\\360\\363\\205\\345\\201\\001 \\200\\317\\204\\253\\347\\275\\234\\266f \\240\\257\\211\\367\\360\\324\\263\\355\\301\\001 \\206\\200\\231\\345\\330\\247\\263\\354\\330\\001\" memory_total_kbytes: 2099249 notification_permission_info { notifications_setting: NOTIFICATIONS_SETTING_ENABLED last_device_opt_in_change_time_ago_sec: 1443901 } client_store_info { ios_store_country: \"CHN\" } } user { } request { consistency_token_jars { encrypted_token_jar_contents: \"APAR8nuBsEHWfbhMc_7qbsDZisRhTO3etXIRjKB2zvsQl9o_AvLXdrEs1i91AvcWJjJdmBTCa2EZGvZxgpRgRUGPSYakJafs6pgN8yjtn6XsTFkPVxel_GKp0ke3gbEX-g8Cz0Wrwm_jfg5F7jY3R50\" expiration_seconds: 600 } } ad_signals_info { params { key: \"ms\" value: \"nKInODikPbW5nZD7-orVwsCNDVgYSkaH6EGXwm_PlAKKGSVYQVHTcw3_XePIrEbxBTRrmV3UUHTWF-MRLDmd5I9Pg7v1Ua3o2Mj-B7bBnEzKPdfnF4DqOXZwAi_0ZQ-vyUcHRkXmtDHO8bQftFTRVtlyYojutUD9cMKfGr7A-AfuuX0Lu_zx-5rNjLcr0jJk1pRflLyNzzBb_x-q_k4BK6t84oolWybLCVtcjSgtjzM4PHQ930tHwRy_J4Fj1R_zKikJYPzlTJPQNRPIkCqnvms9KN8uNpH9zwQ0mugFuVNPOGahOCbUbXPwMCbm_fxx3_Y5TBv1h4nzna8PnClpcg\" } } active_players { player_context_params: \"CAESAggC\" } } params: \"AMuy297mOqX2BxzOrKygkIsYdDHkLiG_AyrS0Yuc4HnlsYmj75WBHLbHN7J_IgDHdxbGjDRN2lqF9Tv5DDVWQJi5Cz8USR_zRJSsE9-NPYKQ56q_0WvnOdorN2k1ACFwL5EfTXNivrhcNN01hye3vahRJx3wM6KJFU4_Lcdkdxc3cvJkStx30-cZYqmtjdQzzMlkOWqfKZyZsN6VRn-a-Zgdb3pq7rjbALUHnx9_VhmB0CbX4JnDaohOdKMq0bxTYOrF9Ks2tpJydEO00SOIjrpp_EcSi5xbCNedRQGX96goAF5cD7wvkAFFTDu1fAJPnHNFpS5h7_HrU70YmDmzqvGrLVLv4zE0b_bvlpCvQhSCD71DIl925cA\" break_position_ms: 420000 break_index: 1 override_playback_context { content_playback_context { time_since_last_ad_seconds: 407 lact_milliseconds: 406153 autoplays_since_last_ad: 0 conn: 3 vis: 0 fling: false autoplay: false adsense_client_params: \"video_format=22&sdkv=i.17.08&output=xml_vast2\" autonav: false autonav_state: STATE_OFF } } client_playback_nonce: \"KKa0HyDqTM0S9a6A\" } crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:33:59 "},"protobuf_re/youtube/normal_ios/ytiinnertubecontext.html":{"url":"protobuf_re/youtube/normal_ios/ytiinnertubecontext.html","title":"YTIInnerTubeContext","keywords":"","body":"YTIInnerTubeContext TODO： 【未解决】研究YouTube逻辑：从OnesieRequestProto子属性类型YTIInnerTubeContext找到生成data的机制 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:46:32 "},"protobuf_re/youtube/normal_ios/yticlientinfo.html":{"url":"protobuf_re/youtube/normal_ios/yticlientinfo.html","title":"YTIClientInfo","keywords":"","body":"YTIClientInfo 【未解决】研究YouTube逻辑：搞懂protobuf类YTIClientInfo的字段定义 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 14:52:14 "},"protobuf_re/youtube/lite_cpp/":{"url":"protobuf_re/youtube/lite_cpp/","title":"lite的C++类","keywords":"","body":"lite的C++类 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:44:48 "},"protobuf_re/youtube/lite_cpp/onesierequestproto.html":{"url":"protobuf_re/youtube/lite_cpp/onesierequestproto.html","title":"OnesieRequestProto","keywords":"","body":"OnesieRequestProto TODO： 【未解决】研究YouTube逻辑：lite版protobuf类OnesieRequestProto如何搞清楚属性字段定义 【未解决】研究YouTube逻辑：OnesieRequestProto相关 OnesieRequestProto的vtable定义 经过逆向，目前的理解是： IDA中改名： 核心定义： 000004F7BEE8 ; `vtable for'video_streaming::OnesieRequestProto __const:0000000004F7BEE8 __ZTVN15video_streaming18OnesieRequestProtoE DCQ 0 ; offset to this __const:0000000004F7BEF0 DCQ __ZTIN15video_streaming18OnesieRequestProtoE ; `typeinfo for'video_streaming::OnesieRequestProto __const:0000000004F7BEF8 MessageLite_commonDctor_4F7BEF8 DCQ OnesieRequestProto_commonDctor_32D3230 __const:0000000004F7BEF8 ; DATA XREF: requestConstructor_32D2E8C+C↑o __const:0000000004F7BEF8 ; requestConstructor_32D2E8C+10↑o ... __const:0000000004F7BF00 DCQ OnesieRequestProto_dtor_32D3234 __const:0000000004F7BF08 DCQ OnesieRequestProto_GetTypeName_32D3ED8 __const:0000000004F7BF10 DCQ OnesieRequestProto_NewArena_32D3FA0 __const:0000000004F7BF18 DCQ OnesieRequestProto_Clear_32D3248 __const:0000000004F7BF20 DCQ OnesieRequestProto_IsInitialized_32D3EA8 __const:0000000004F7BF28 DCQ MessageLite_InitializationErrorString_3891244 __const:0000000004F7BF30 DCQ OnesieRequestProto_CheckTypeAndMergeFrom_32D3EA4 __const:0000000004F7BF38 DCQ OnesieRequestProto_ByteSizeLong_32D3BAC __const:0000000004F7BF40 DCQ __ZNK7youtube8elements6Entity13GetCachedSizeEv ; youtube::elements::Entity::GetCachedSize(void) __const:0000000004F7BF48 DCQ OnesieRequestProto__InternalParse_32D338C __const:0000000004F7BF50 DCQ __ZN6proto28internal24GeneratedExtensionFinderD1Ev ; proto2::internal::GeneratedExtensionFinder::~GeneratedExtensionFinder() __const:0000000004F7BF58 DCQ OnesieRequestProto__InternalSerialize_32D373C __const:0000000004F7BF60 ; public video_streaming::OnesieRequestProto : OnesieRequestProto的vtable定义： vtable OnesieRequestProto +0x08 = OnesieRequestProto typeinfo +0x10 = MessageLite_commonDctor_4F7BEF8 = OnesieRequestProto_commonDctor_32D3230 某种 deconstructor ？ +0x18 = OnesieRequestProto_dtor_32D3234 virtual ~MessageLite() = default; +0x20 = OnesieRequestProto_GetTypeName_32D3ED8 virtual std::string GetTypeName() const = 0; +0x28 = OnesieRequestProto_NewArena_32D3FA0 virtual MessageLite New(Arena arena) const = 0; +0x30 = OnesieRequestProto_Clear_32D3248 virtual void Clear() = 0; +0x38 = OnesieRequestProto_IsInitialized_32D3EA8 virtual bool IsInitialized() const = 0; +0x40 = MessageLite_InitializationErrorString_3891244 virtual std::string InitializationErrorString() const; +0x48 = OnesieRequestProto_CheckTypeAndMergeFrom_32D3EA4 virtual void CheckTypeAndMergeFrom(const MessageLite& other) = 0; +0x50 = OnesieRequestProto_ByteSizeLong_32D3BAC virtual size_t ByteSizeLong() const = 0; +0x58 = youtube::elements::Entity::GetCachedSize(void) virtual int GetCachedSize() const = 0; +0x60 = OnesieRequestProto__InternalParse_32D338C virtual const char _InternalParse(const char /ptr/, internal::ParseContext /ctx*/) +0x68 = proto2::internal::GeneratedExtensionFinder::~GeneratedExtensionFinder() virtual void OnDemandRegisterArenaDtor(Arena /arena*/) {} +0x70 = OnesieRequestProto__InternalSerialize_32D373C virtual uint8_t _InternalSerialize(uint8_t ptr, io::EpsCopyOutputStream* stream) const = 0; crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:46:21 "},"appendix/":{"url":"appendix/","title":"附录","keywords":"","body":"附录 下面列出相关参考资料。 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 14:44:04 "},"appendix/reference.html":{"url":"appendix/reference.html","title":"参考资料","keywords":"","body":"参考资料 【整理】Protocol Buffers即protobuf总结 【未解决】研究YouTube逻辑：OnesieRequestProto类的具体vtable函数实现 【已解决】研究YouTube逻辑：从NSData直接解析出protobuf的类YTIAdBreakRequest protobuf/src/google/protobuf/message_lite.h - chromium/src/third_party - Git at Google (googlesource.com) message_lite.h | Protocol Buffers | Google Developers third_party/protobuf/src/google/protobuf/message_lite.cc - chromium/src - Git at Google (googlesource.com) PB协议报错 it is missing required fields: (cannot determine missing fields for lite message)_军说网事的博客-CSDN博客 examples - external/github.com/google/protobuf - Git at Google (googlesource.com) crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-11-04 15:38:48 "}}