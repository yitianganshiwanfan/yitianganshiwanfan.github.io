{"./":{"url":"./","title":"前言","keywords":"","body":"Xcode内置调试器：LLDB 最新版本：v0.8 更新时间：20221027 简介 介绍Xcode内置的调试器LLDB。先是LLDB概览；再详细介绍LLDB的命令，包括LLDB的命令概览和LLDB的各个命令；LLDB命令概览包括cheat sheet和help语法；LLDB常用命令包括image、register、expression，尤其是其中的p和po、memory、disassemble、thread、frame、breakpoint、watchpoint、以及调试控制相关的命令，包括run、continue、next和nexti、step和stepi、jump、finish、exit等，且都给出help语法和用法举例；然后再整理出相关心得，包括命令的缩写、Xcode中的lldb、iOS逆向、LLVM等等。最后给出相关的文档和资料。 源码+浏览+下载 本书的各种源码、在线浏览地址、多种格式文件下载如下： HonKit源码 crifan/xcode_debugger_lldb: Xcode内置调试器：LLDB 如何使用此HonKit源码去生成发布为电子书 详见：crifan/honkit_template: demo how to use crifan honkit template and demo 在线浏览 Xcode内置调试器：LLDB book.crifan.org Xcode内置调试器：LLDB crifan.github.io 离线下载阅读 Xcode内置调试器：LLDB PDF Xcode内置调试器：LLDB ePub Xcode内置调试器：LLDB Mobi 版权和用途说明 此电子书教程的全部内容，如无特别说明，均为本人原创。其中部分内容参考自网络，均已备注了出处。如有版权，请通过邮箱联系我 admin 艾特 crifan.com，我会尽快删除。谢谢合作。 各种技术类教程，仅作为学习和研究使用。请勿用于任何非法用途。如有非法用途，均与本人无关。 鸣谢 感谢我的老婆陈雪的包容理解和悉心照料，才使得我crifan有更多精力去专注技术专研和整理归纳出这些电子书和技术教程，特此鸣谢。 更多其他电子书 本人crifan还写了其他100+本电子书教程，感兴趣可移步至： crifan/crifan_ebook_readme: Crifan的电子书的使用说明 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 21:51:35 "},"lldb_overview/":{"url":"lldb_overview/","title":"LLDB概览","keywords":"","body":"LLDB概览 TODO： 【已解决】XCode和lldb调试常见用法和调试心得 背景 主流常见调试器=debugger GNU 的 GDB (开源项目LLVM中的) LLDB Apple的Xcode的内置调试器 之前：GDB 现在(Xcode 5+)：LLDB LLDB LLDB 名称：常写成小写的lldb 是什么：一个下一代的、高性能的开源调试器 说明 和LLVM关系 属于（更大的，开源的）LLVM项目的一部分=其中一个模块 所以LLDB也是开源的 常搭配LLVM的其他模块一起使用 expression parser=解释器：Clang disassembler=反汇编器：LLVM disassembler 和Xcode关系 是Xcode内置的调试器：之前是GDB，现在是LLDB 特点 支持调试语言 Xcode中的LLDB 支持调试C、Objective-C、C++ 支持运行平台：桌面端macOS、移动端iOS（设备和模拟器） 支持众多平台：macOS、iOS、Linux、FreeBSD、NetBSD、Windows 支持REPL、C++ 和 Python 插件 注：REPL=Read-Eval-Print Loop=交互式解释器 此处 主要使用场景 iOS逆向时，用LLDB调试ObjC的相关内容 lldb的位置和版本 Mac中的lldb 二进制 Mac自带的： /usr/bin/lldb Xcode中的：/Applications/Xcode.app/Contents/Developer/usr/bin/lldb 集成进XCode 位置：内嵌在Xcode中的（一般是右下角的）调试区域的控制台 Mac自带的lldb crifan@licrifandeMacBook-Pro  ~  which lldb /usr/bin/lldb crifan@licrifandeMacBook-Pro  ~  ll /usr/bin/lldb -rwxr-xr-x 1 root wheel 134K 1 1 2020 /usr/bin/lldb crifan@licrifandeMacBook-Pro  ~  /usr/bin/lldb --version lldb-1300.0.42.3 Swift version 5.5.2-dev Xcode中的lldb crifan@licrifandeMacBook-Pro  ~  ll /Applications/Xcode.app/Contents/Developer/usr/bin/lldb -rwxr-xr-x 1 crifan staff 828K 12 15 2021 /Applications/Xcode.app/Contents/Developer/usr/bin/lldb crifan@licrifandeMacBook-Pro  ~  /Applications/Xcode.app/Contents/Developer/usr/bin/lldb --version lldb-1300.0.42.3 Swift version 5.5.2-dev crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 17:55:58 "},"lldb_commands/":{"url":"lldb_commands/","title":"LLDB命令","keywords":"","body":"LLDB命令 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/command_all/":{"url":"lldb_commands/command_all/","title":"命令概览","keywords":"","body":"LLDB命令概览 TODO： 【整理】lldb的语法和用法 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 17:44:57 "},"lldb_commands/command_all/cheat_sheet.html":{"url":"lldb_commands/command_all/cheat_sheet.html","title":"lldb的cheat sheet","keywords":"","body":"lldb的cheat sheet lldb的cheat sheet=小抄=手册： crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 17:47:39 "},"lldb_commands/command_all/lldb_help.html":{"url":"lldb_commands/command_all/lldb_help.html","title":"lldb的help","keywords":"","body":"lldb的help lldb的help：显示所有命令的帮助信息 (lldb) help Debugger commands: apropos -- List debugger commands related to a word or subject. breakpoint -- Commands for operating on breakpoints (see 'help b' for shorthand.) command -- Commands for managing custom LLDB commands. disassemble -- Disassemble specified instructions in the current target. Defaults to the current function for the current thread and stack frame. expression -- Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting. frame -- Commands for selecting and examing the current thread's stack frames. gdb-remote -- Connect to a process via remote GDB server. If no host is specifed, localhost is assumed. gui -- Switch into the curses based GUI mode. help -- Show a list of all debugger commands, or give details about a specific command. kdp-remote -- Connect to a process via remote KDP server. If no UDP port is specified, port 41139 is assumed. language -- Commands specific to a source language. log -- Commands controlling LLDB internal logging. memory -- Commands for operating on memory in the current target process. platform -- Commands to manage and create platforms. plugin -- Commands for managing LLDB plugins. process -- Commands for interacting with processes on the current platform. quit -- Quit the LLDB debugger. register -- Commands to access registers for the current thread and stack frame. reproducer -- Commands for manipulating reproducers. Reproducers make it possible to capture full debug sessions with all its dependencies. The resulting reproducer is used to replay the debug session while debugging the debugger. Because reproducers need the whole the debug session from beginning to end, you need to launch the debugger in capture or replay mode, commonly though the command line driver. Reproducers are unrelated record-replay debugging, as you cannot interact with the debugger during replay. script -- Invoke the script interpreter with provided code and display any results. Start the interactive interpreter if no code is supplied. session -- Commands controlling LLDB session. settings -- Commands for managing LLDB settings. source -- Commands for examining source code described by debug information for the current target process. statistics -- Print statistics about a debugging session target -- Commands for operating on debugger targets. thread -- Commands for operating on one or more threads in the current process. trace -- Commands for loading and using processor trace information. type -- Commands for operating on the type system. version -- Show the LLDB debugger version. watchpoint -- Commands for operating on watchpoints. Current command abbreviations (type 'help command alias' for more info): add-dsym -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file or by using the options to specify a module. attach -- Attach to process by ID or name. b -- Set a breakpoint using one of several shorthand formats. bt -- Show the current thread's call stack. Any numeric argument displays at most that many frames. The argument 'all' displays all threads. Use 'settings set frame-format' to customize the printing of individual frames and 'settings set thread-format' to customize the thread header. c -- Continue execution of all threads in the current process. call -- Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting. continue -- Continue execution of all threads in the current process. detach -- Detach from the current target process. di -- Disassemble specified instructions in the current target. Defaults to the current function for the current thread and stack frame. dis -- Disassemble specified instructions in the current target. Defaults to the current function for the current thread and stack frame. display -- Evaluate an expression at every stop (see 'help target stop-hook'.) down -- Select a newer stack frame. Defaults to moving one frame, a numeric argument can specify an arbitrary number. env -- Shorthand for viewing and setting environment variables. exit -- Quit the LLDB debugger. f -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.) file -- Create a target using the argument as the main executable. finish -- Finish executing the current stack frame and stop after returning. Defaults to current thread unless specified. history -- Dump the history of commands in this session. Commands in the history list can be run again using \"!\". \"!-\" will re-run the command that is commands from the end of the list (counting the current command). image -- Commands for accessing information for one or more target modules. j -- Set the program counter to a new address. jump -- Set the program counter to a new address. kill -- Terminate the current target process. l -- List relevant source code using one of several shorthand formats. list -- List relevant source code using one of several shorthand formats. n -- Source level single step, stepping over calls. Defaults to current thread unless specified. next -- Source level single step, stepping over calls. Defaults to current thread unless specified. nexti -- Instruction level single step, stepping over calls. Defaults to current thread unless specified. ni -- Instruction level single step, stepping over calls. Defaults to current thread unless specified. p -- Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting. parray -- parray -- lldb will evaluate EXPRESSION to get a typed-pointer-to-an-array in memory, and will display COUNT elements of that type from the array. po -- Evaluate an expression on the current thread. Displays any returned value with formatting controlled by the type's author. poarray -- poarray -- lldb will evaluate EXPRESSION to get the address of an array of COUNT objects in memory, and will call po on them. print -- Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting. q -- Quit the LLDB debugger. r -- Launch the executable in the debugger. rbreak -- Sets a breakpoint or set of breakpoints in the executable. re -- Commands to access registers for the current thread and stack frame. repl -- Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting. run -- Launch the executable in the debugger. s -- Source level single step, stepping into calls. Defaults to current thread unless specified. shell -- Run a shell command on the host. si -- Instruction level single step, stepping into calls. Defaults to current thread unless specified. sif -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName. step -- Source level single step, stepping into calls. Defaults to current thread unless specified. stepi -- Instruction level single step, stepping into calls. Defaults to current thread unless specified. t -- Change the currently selected thread. tbreak -- Set a one-shot breakpoint using one of several shorthand formats. undisplay -- Stop displaying expression at every stop (specified by stop-hook index.) up -- Select an older stack frame. Defaults to moving one frame, a numeric argument can specify an arbitrary number. v -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as 'var->child.x'. The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element. If you want to trigger operator overloads use the expression command to print the variable instead. It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results. However, 'frame variable' is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program. var -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as 'var->child.x'. The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element. If you want to trigger operator overloads use the expression command to print the variable instead. It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results. However, 'frame variable' is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program. vo -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as 'var->child.x'. The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element. If you want to trigger operator overloads use the expression command to print the variable instead. It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results. However, 'frame variable' is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program. x -- Read from the memory of the current target process. For more information on any command, type 'help '. lldb的help的用法解释 单个命令=子命令 单个命令的语法，可以用： help 举例： help register (lldb) help register Commands to access registers for the current thread and stack frame. Syntax: register [read|write] ... The following subcommands are supported: read -- Dump the contents of one or more register values from the current frame. If no register is specified, dumps them all. write -- Modify a single register value. For more help on any particular subcommand, type 'help '. help memory (lldb) help memory Commands for operating on memory in the current target process. Syntax: memory [] The following subcommands are supported: find -- Find a value in the memory of the current target process. history -- Print recorded stack traces for allocation/deallocation events associated with an address. read -- Read from the memory of the current target process. region -- Get information on the memory region containing an address in the current target process. write -- Write to the memory of the current target process. For more help on any particular subcommand, type 'help '. 单个命令的子命令=单个命令的参数 而命令的子命令的语法，也是前面加上help： help 举例： help memory read (lldb) help memory read Read from the memory of the current target process. Syntax: memory read [] Command Options Usage: memory read [-drd] [-f ] [-c ] [-G ] [-s ] [-l ] [-o ] [] memory read [-dbrd] [-f ] [-c ] [-s ] [-o ] [] memory read [-AFLORTdrd] -t [-f ] [-c ] [-G ] [-E ] [-o ] [-d ] [-S ] [-D ] [-P ] [-Y[]] [-V ] [-Z ] [] memory read -t [-x ] [] -A ( --show-all-children ) Ignore the upper bound on the number of children to show. -D ( --depth ) Set the max recurse depth when dumping aggregate types (default is infinity). -E ( --offset ) How many elements of the specified type to skip before starting to display data. -F ( --flat ) Display results in a flat format that uses expression paths for each variable or member. -G ( --gdb-format ) Specify a format using a GDB format specifier string. -L ( --location ) Show variable location information. -O ( --object-description ) Display using a language-specific description API, if possible. -P ( --ptr-depth ) The number of pointers to be traversed when dumping values (default is zero). -R ( --raw-output ) Don't use formatting options. -S ( --synthetic-type ) Show the object obeying its synthetic provider, if available. -T ( --show-types ) Show variable types when dumping values. -V ( --validate ) Show results of type validators. -Y[] ( --no-summary-depth=[] ) Set the depth at which omitting summary information stops (default is 1). -Z ( --element-count ) Treat the result of the expression as if its type is an array of this many values. -b ( --binary ) If true, memory will be saved as binary. If false, the memory is saved save as an ASCII dump that uses the format, size, count and number per line settings. -c ( --count ) The number of total items to display. -d ( --dynamic-type ) Show the object as its full dynamic type, not its static type, if available. Values: no-dynamic-values | run-target | no-run-target -f ( --format ) Specify a format to be used for display. -l ( --num-per-line ) The number of items per line to display. -o ( --outfile ) Specify a path for capturing command output. -r ( --force ) Necessary if reading over target.max-memory-read-size bytes. -s ( --size ) The size in bytes to use when displaying with the selected format. -t ( --type ) The name of a type to view memory as. -x ( --language ) The language of the type to view memory as. -d ( --append-outfile ) Append to the file specified with '--outfile '. This command takes options and free-form arguments. If your arguments resemble option specifiers (i.e., they start with a - or --), you must use ' -- ' between the end of the command options and the beginning of the arguments. crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 17:46:49 "},"lldb_commands/common_cmd/":{"url":"lldb_commands/common_cmd/","title":"常用命令","keywords":"","body":"常用命令 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/common_cmd/image.html":{"url":"lldb_commands/common_cmd/image.html","title":"image","keywords":"","body":"image TODO： 【记录】lldb命令使用心得：image 【已解决】lldb命令使用心得：image 【已解决】lldb命令使用心得：image lookup image用法举例 image list (lldb) image list -o -f | grep AwemeCore [ 0] 0x0000000100adc000 /Users/crifan/Library/Developer/Xcode/DerivedData/Aweme-fswcidjoxbkibsdwekuzlsfcdqls/Build/Products/Debug-iphoneos/Aweme.app/Frameworks/AwemeCore.framework/AwemeCore (lldb) image list -o -f | grep Module_Framework [ 0] 0x0000000104238000 /Users/crifan/Library/Developer/Xcode/DerivedData/youtube-dvlfmmtvybrcdraorwznbwwepoae/Build/Products/Debug-iphoneos/youtube.app/Frameworks/Module_Framework.framework/Module_Framework (lldb) image list -o -f | grep Module_Framework [ 0] 0x0000000102b50000 /Users/crifan/Library/Developer/Xcode/DerivedData/youtube-dvlfmmtvybrcdraorwznbwwepoae/Build/Products/Debug-iphoneos/youtube.app/Frameworks/Module_Framework.framework/Module_Framework (lldb) p/x 0x0000000102b50000 + 0x10470B8 (long) $0 = 0x0000000103b970b8 (lldb) im loo -a 0x0000000103b970b8 Address: Module_Framework[0x00000000010470b8] (Module_Framework.__TEXT.__text + 17051832) Summary: Module_Framework`___lldb_unnamed_symbol12565$$Module_Framework image lookup -N functionNameOrClassName (lldb) image lookup -n transformOtherModelToSuit: 1 match found in /Users/crifan/Library/Developer/Xcode/DerivedData/DiDi-cwpbvvyvqmeijmcjnneothzuthsy/Build/Products/Debug-iphonesimulator/DiDi.app/DiDi: Address: DiDi[0x0000000100293d60] (DiDi.__TEXT.__text + 2693664) Summary: DiDi`+[FW_BetFunction transformOtherModelToSuit:] at FW_BetFunction.m:107 image lookup -a address = im loo -a address (lldb) image lookup -a 0x10f04f810 Address: AwemeCore[0x000000000c587810] (AwemeCore.__BD_TEXT.__text + 113653776) Summary: AwemeCore`___lldb_unnamed_symbol1023498$$AwemeCore + 32 (lldb) im loo -a 0x00000001091694a4 Address: Module_Framework[0x0000000003df94a4] (Module_Framework.__TEXT.__text + 64967844) Summary: Module_Framework`___lldb_unnamed_symbol171165$$Module_Framework image lookup -v -a address (lldb) image lookup -v -a 0x10f04f810 Address: AwemeCore[0x000000000c587810] (AwemeCore.__BD_TEXT.__text + 113653776) Summary: AwemeCore`___lldb_unnamed_symbol1023498$$AwemeCore + 32 Module: file = \"/Users/crifan/Library/Developer/Xcode/DerivedData/Aweme-fswcidjoxbkibsdwekuzlsfcdqls/Build/Products/Debug-iphoneos/Aweme.app/Frameworks/AwemeCore.framework/AwemeCore\", arch = \"arm64\" Symbol: id = {0x0014c028}, range = [0x000000010f04f7f0-0x000000010f04f844), name=\"___lldb_unnamed_symbol1023498$$AwemeCore\" image命令语法 (lldb) help image Commands for accessing information for one or more target modules. Syntax: image 'image' is an abbreviation for 'target modules' (lldb) help target modules Commands for accessing information for one or more target modules. Syntax: target modules ... The following subcommands are supported: add -- Add a new module to the current target's modules. dump -- Commands for dumping information about one or more target modules. list -- List current executable and dependent shared library images. load -- Set the load addresses for one or more sections in a target module. lookup -- Look up information within executable and dependent shared library images. search-paths -- Commands for managing module search paths for a target. show-unwind -- Show synthesized unwind instructions for a function. For more help on any particular subcommand, type 'help '. crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 21:48:13 "},"lldb_commands/common_cmd/register.html":{"url":"lldb_commands/common_cmd/register.html","title":"register","keywords":"","body":"register TODO： 【记录】lldb命令使用心得：register register举例 (lldb) reg r x0 x1 x2 x3 x0 = 0x000000029e100ea0 x1 = 0x0000000000000000 x2 = 0x0000000292566f00 x3 = 0x0000000289d922e0 (lldb) reg r x8 x8 = 0x0000000107e2fef8 Module_Framework`vtable for video_streaming::OnesieRequestProto + 16 register语法 (lldb) help register Commands to access registers for the current thread and stack frame. Syntax: register [read|write] ... The following subcommands are supported: read -- Dump the contents of one or more register values from the current frame. If no register is specified, dumps them all. write -- Modify a single register value. For more help on any particular subcommand, type 'help '. register read语法 (lldb) help register read Dump the contents of one or more register values from the current frame. If no register is specified, dumps them all. Syntax: register read [ [ [...]]] Command Options Usage: register read [-A] [-f ] [-G ] [-s ] [ [ [...]]] register read [-Aa] [-f ] [-G ] [ [ [...]]] -A ( --alternate ) Display register names using the alternate register name if there is one. -G ( --gdb-format ) Specify a format using a GDB format specifier string. -a ( --all ) Show all register sets. -f ( --format ) Specify a format to be used for display. -s ( --set ) Specify which register sets to dump by index. This command takes options and free-form arguments. If your arguments resemble option specifiers (i.e., they start with a - or --), you must use ' -- ' between the end of the command options and the beginning of the arguments. crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 21:48:26 "},"lldb_commands/common_cmd/expression/":{"url":"lldb_commands/common_cmd/expression/","title":"expression","keywords":"","body":"expression TODO： 【记录】lldb命令使用心得：expression 【记录】lldb命令使用心得：p和po 【整理】Xcode中lldb命令对比：po和p p和po p == expression -- po == expression -O -- expression语法 (lldb) help expression Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting. Expects 'raw' input (see 'help raw-input'.) Syntax: expression -- Command Options Usage: expression [-AFLORTgp] [-f ] [-G ] [-a ] [-j ] [-X ] [-v[]] [-i ] [-l ] [-t ] [-u ] [-d ] [-S ] [-D ] [-P ] [-Y[]] [-V ] [-Z ] -- expression [-AFLORTgp] [-a ] [-j ] [-X ] [-i ] [-l ] [-t ] [-u ] [-d ] [-S ] [-D ] [-P ] [-Y[]] [-V ] [-Z ] -- expression [-r] -- expression -A ( --show-all-children ) Ignore the upper bound on the number of children to show. -D ( --depth ) Set the max recurse depth when dumping aggregate types (default is infinity). -F ( --flat ) Display results in a flat format that uses expression paths for each variable or member. -G ( --gdb-format ) Specify a format using a GDB format specifier string. -L ( --location ) Show variable location information. -O ( --object-description ) Display using a language-specific description API, if possible. -P ( --ptr-depth ) The number of pointers to be traversed when dumping values (default is zero). -R ( --raw-output ) Don't use formatting options. -S ( --synthetic-type ) Show the object obeying its synthetic provider, if available. -T ( --show-types ) Show variable types when dumping values. -V ( --validate ) Show results of type validators. -X ( --apply-fixits ) If true, simple fix-it hints will be automatically applied to the expression. -Y[] ( --no-summary-depth=[] ) Set the depth at which omitting summary information stops (default is 1). -Z ( --element-count ) Treat the result of the expression as if its type is an array of this many values. -a ( --all-threads ) Should we run all threads if the execution doesn't complete on one thread. -d ( --dynamic-type ) Show the object as its full dynamic type, not its static type, if available. Values: no-dynamic-values | run-target | no-run-target -f ( --format ) Specify a format to be used for display. -g ( --debug ) When specified, debug the JIT code by setting a breakpoint on the first instruction and forcing breakpoints to not be ignored (-i0) and no unwinding to happen on error (-u0). -i ( --ignore-breakpoints ) Ignore breakpoint hits while running expressions -j ( --allow-jit ) Controls whether the expression can fall back to being JITted if it's not supported by the interpreter (defaults to true). -l ( --language ) Specifies the Language to use when parsing the expression. If not set the target.language setting is used. -p ( --top-level ) Interpret the expression as a complete translation unit, without injecting it into the local context. Allows declaration of persistent, top-level entities without a $ prefix. -r ( --repl ) Drop into Swift REPL -t ( --timeout ) Timeout value (in microseconds) for running the expression. -u ( --unwind-on-error ) Clean up program state if the expression causes a crash, or raises a signal. Note, unlike gdb hitting a breakpoint is controlled by another option (-i). -v[] ( --description-verbosity=[] ) How verbose should the output of this expression be, if the object description is asked for. Values: compact | full Single and multi-line expressions: The expression provided on the command line must be a complete expression with no newlines. To evaluate a multi-line expression, hit a return after an empty expression, and lldb will enter the multi-line expression editor. Hit return on an empty line to end the multi-line expression. Timeouts: If the expression can be evaluated statically (without running code) then it will be. Otherwise, by default the expression will run on the current thread with a short timeout: currently .25 seconds. If it doesn't return in that time, the evaluation will be interrupted and resumed with all threads running. You can use the -a option to disable retrying on all threads. You can use the -t option to set a shorter timeout. User defined variables: You can define your own variables for convenience or to be used in subsequent expressions. You define them the same way you would define variables in C. If the first character of your user defined variable is a $, then the variable's value will be available in future expressions, otherwise it will just be available in the current expression. Continuing evaluation after a breakpoint: If the \"-i false\" option is used, and execution is interrupted by a breakpoint hit, once you are done with your investigation, you can either remove the expression execution frames from the stack with \"thread return -x\" or if you are still interested in the expression result you can issue the \"continue\" command and the expression evaluation will complete and the expression result will be available using the \"thread.completed-expression\" key in the thread format. Examples: expr my_struct->a = my_array[3] expr -f bin -- (index * 8) + 5 expr unsigned int $foo = 5 expr char c[] = \\\"foo\\\"; c[0] Important Note: Because this command takes 'raw' input, if you use any command options you must use ' -- ' between the end of the command options and the beginning of the raw input. crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 21:48:36 "},"lldb_commands/common_cmd/expression/p.html":{"url":"lldb_commands/common_cmd/expression/p.html","title":"p","keywords":"","body":"p p == expression -- 常见p的缩写的语法 英文 p // p/x //x=hex=hexadecimal p/d //d=decimal=signed decimal p/u //u=unsigned decimal p/o //o=octal p/t //t=two=binary p/a //a=address p/c //c=char=character p/f //f=float p/s //s=string p/r //r=raw 中文 p //! crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 21:31:37 "},"lldb_commands/common_cmd/expression/po.html":{"url":"lldb_commands/common_cmd/expression/po.html","title":"po","keywords":"","body":"po po == expression -O -- po举例 (lldb) po $x1 8203662366 (lldb) po (SEL)$x1 \"stringByAppendingString:\" (lldb) po $x2 (lldb) po $x3 {( executing )} (lldb) po $arg3 (lldb) reg r x1 x2 x3 x1 = 0x000000010a328d0a x2 = 0x0000000281f79160 x3 = 0x000000016b4b8ea8 (lldb) po 0x000000010a328d0a 4466052362 (lldb) po 0x0000000281f79160 (lldb) po 0x000000016b4b8ea8 6095081128 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 21:33:02 "},"lldb_commands/common_cmd/memory.html":{"url":"lldb_commands/common_cmd/memory.html","title":"memory","keywords":"","body":"memory TODO： 【记录】lldb命令使用心得：memory memory举例 (lldb) x/16gx 0x0000000109117438 0x109117438: 0x0000000000000000 0x0000000000000000 0x109117448: 0x00000001052b6a88 0x00000001052b6ad8 0x109117458: 0x000000010521b03c 0x00000001052b5758 0x109117468: 0x00000001052b5850 0x00000001052b5980 0x109117478: 0x00000001052b5ab0 0x00000001052b6638 0x109117488: 0x00000001052b6674 0x000000010521b40c 0x109117498: 0x00000001052b65fc 0x00000001052b6a10 0x1091174a8: 0x00000001052b6a4c 0x00000001052b5a74 memory语法 (lldb) help memory Commands for operating on memory in the current target process. Syntax: memory [] The following subcommands are supported: find -- Find a value in the memory of the current target process. history -- Print recorded stack traces for allocation/deallocation events associated with an address. read -- Read from the memory of the current target process. region -- Get information on the memory region containing an address in the current target process. write -- Write to the memory of the current target process. For more help on any particular subcommand, type 'help '. memory read语法 (lldb) help memory read Read from the memory of the current target process. Syntax: memory read [] Command Options Usage: memory read [-drd] [-f ] [-c ] [-G ] [-s ] [-l ] [-o ] [] memory read [-dbrd] [-f ] [-c ] [-s ] [-o ] [] memory read [-AFLORTdrd] -t [-f ] [-c ] [-G ] [-E ] [-o ] [-d ] [-S ] [-D ] [-P ] [-Y[]] [-V ] [-Z ] [] memory read -t [-x ] [] -A ( --show-all-children ) Ignore the upper bound on the number of children to show. -D ( --depth ) Set the max recurse depth when dumping aggregate types (default is infinity). -E ( --offset ) How many elements of the specified type to skip before starting to display data. -F ( --flat ) Display results in a flat format that uses expression paths for each variable or member. -G ( --gdb-format ) Specify a format using a GDB format specifier string. -L ( --location ) Show variable location information. -O ( --object-description ) Display using a language-specific description API, if possible. -P ( --ptr-depth ) The number of pointers to be traversed when dumping values (default is zero). -R ( --raw-output ) Don't use formatting options. -S ( --synthetic-type ) Show the object obeying its synthetic provider, if available. -T ( --show-types ) Show variable types when dumping values. -V ( --validate ) Show results of type validators. -Y[] ( --no-summary-depth=[] ) Set the depth at which omitting summary information stops (default is 1). -Z ( --element-count ) Treat the result of the expression as if its type is an array of this many values. -b ( --binary ) If true, memory will be saved as binary. If false, the memory is saved save as an ASCII dump that uses the format, size, count and number per line settings. -c ( --count ) The number of total items to display. -d ( --dynamic-type ) Show the object as its full dynamic type, not its static type, if available. Values: no-dynamic-values | run-target | no-run-target -f ( --format ) Specify a format to be used for display. -l ( --num-per-line ) The number of items per line to display. -o ( --outfile ) Specify a path for capturing command output. -r ( --force ) Necessary if reading over target.max-memory-read-size bytes. -s ( --size ) The size in bytes to use when displaying with the selected format. -t ( --type ) The name of a type to view memory as. -x ( --language ) The language of the type to view memory as. -d ( --append-outfile ) Append to the file specified with '--outfile '. This command takes options and free-form arguments. If your arguments resemble option specifiers (i.e., they start with a - or --), you must use ' -- ' between the end of the command options and the beginning of the arguments. crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 21:48:59 "},"lldb_commands/common_cmd/disassemble.html":{"url":"lldb_commands/common_cmd/disassemble.html","title":"disassemble","keywords":"","body":"disassemble TODO： 【记录】lldb命令使用心得：disassemble disassemble举例 (lldb) disassemble -s 0x00000001091694a4 Module_Framework`___lldb_unnamed_symbol171165$$Module_Framework: 0x1091694a4 : ret Module_Framework`___lldb_unnamed_symbol171166$$Module_Framework: 0x1091694a8 : b 0x1091a45ac ; ___lldb_unnamed_symbol174729$$Module_Framework Module_Framework`___lldb_unnamed_symbol171167$$Module_Framework: 0x1091694ac : ldr x2, [x0, #0x10] 0x1091694b0 : br x2 Module_Framework`___lldb_unnamed_symbol171168$$Module_Framework: 0x1091694b4 : ret Module_Framework`___lldb_unnamed_symbol171169$$Module_Framework: 0x1091694b8 : b 0x1091a45ac ; ___lldb_unnamed_symbol174729$$Module_Framework Module_Framework`___lldb_unnamed_symbol171170$$Module_Framework: 0x1091694bc : ldr x2, [x0, #0x10] 0x1091694c0 : br x2 disassemble语法 (lldb) help disassemble Disassemble specified instructions in the current target. Defaults to the current function for the current thread and stack frame. Syntax: disassemble [] Command Options Usage: disassemble [-bmr] -s [-A ] [-C ] [-e ] [-F ] [-P ] disassemble [-bmr] -s [-A ] [-C ] [-c ] [-F ] [-P ] disassemble [-bmr] [-A ] [-C ] [-c ] [-F ] [-n ] [-P ] disassemble [-bfmr] [-A ] [-C ] [-c ] [-F ] [-P ] disassemble [-bmpr] [-A ] [-C ] [-c ] [-F ] [-P ] disassemble [-blmr] [-A ] [-C ] [-F ] [-P ] disassemble [-bmr] [-a ] [-A ] [-C ] [-c ] [-F ] [-P ] --force Force dissasembly of large functions. -A ( --arch ) Specify the architecture to use from cross disassembly. -C ( --context ) Number of context lines of source to show. -F ( --flavor ) Name of the disassembly flavor you want to use. Currently the only valid options are default, and for Intel architectures, att and intel. -P ( --plugin ) Name of the disassembler plugin you want to use. -a ( --address ) Disassemble function containing this address. -b ( --bytes ) Show opcode bytes when disassembling. -c ( --count ) Number of instructions to display. -e ( --end-address ) Address at which to end disassembling. -f ( --frame ) Disassemble from the start of the current frame's function. -l ( --line ) Disassemble the current frame's current source line instructions if there is debug line table information, else disassemble around the pc. -m ( --mixed ) Enable mixed source and assembly display. -n ( --name ) Disassemble entire contents of the given function name. -p ( --pc ) Disassemble around the current pc. -r ( --raw ) Print raw disassembly with no symbol information. -s ( --start-address ) Address at which to start disassembling. crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 21:49:12 "},"lldb_commands/common_cmd/thread.html":{"url":"lldb_commands/common_cmd/thread.html","title":"thread","keywords":"","body":"thread TODO： 【记录】lldb命令使用心得：thread crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:46:11 "},"lldb_commands/common_cmd/frame.html":{"url":"lldb_commands/common_cmd/frame.html","title":"frame","keywords":"","body":"frame TODO： 【记录】lldb命令使用心得：frame crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:46:37 "},"lldb_commands/common_cmd/breakpoint.html":{"url":"lldb_commands/common_cmd/breakpoint.html","title":"breakpoint","keywords":"","body":"breakpoint TODO： 【记录】lldb命令使用心得：breakpoint 【已解决】Xcode中lldb中b list不是breakpoint list 【未解决】Xcode中无法给下一行将要运行的汇编指令加断点 【已解决】XCode中如何给符号断点加上判断条件 【未解决】XCode和lldb如何根据函数地址加断点 breakpoint举例 breakpoint set -a 函数地址 breakpoint set -a ASLR偏移量 + 静态分析的函数地址 breakpoint set -a （image list -o -f看到的库的加载的起始地址） + （IDA等工具）静态分析的函数地址 (lldb) breakpoint set -a 0x1102d3348 Breakpoint 54: where = AwemeCore`___lldb_unnamed_symbol1462804$$AwemeCore + 480, address = 0x00000001102d3348 (lldb) breakpoint list Current breakpoints: … 54: address = AwemeCore[0x000000000ee2b348], locations = 1, resolved = 1, hit count = 0 54.1: where = AwemeCore`___lldb_unnamed_symbol1462804$$AwemeCore + 480, address = 0x00000001102d3348, resolved, hit count = 0 breakpoint set --name foo --condition '(int)strcmp(y,\"hello\") == 0' == br s -n foo -c '(int)strcmp(y,\"hello\") == 0' breakpoint语法 (lldb) help breakpoint Commands for operating on breakpoints (see 'help b' for shorthand.) Syntax: breakpoint [] The following subcommands are supported: clear -- Delete or disable breakpoints matching the specified source file and line. command -- Commands for adding, removing and listing LLDB commands executed when a breakpoint is hit. delete -- Delete the specified breakpoint(s). If no breakpoints are specified, delete them all. disable -- Disable the specified breakpoint(s) without deleting them. If none are specified, disable all breakpoints. enable -- Enable the specified disabled breakpoint(s). If no breakpoints are specified, enable all of them. list -- List some or all breakpoints at configurable levels of detail. modify -- Modify the options on a breakpoint or set of breakpoints in the executable. If no breakpoint is specified, acts on the last created breakpoint. With the exception of -e, -d and -i, passing an empty argument clears the modification. name -- Commands to manage name tags for breakpoints read -- Read and set the breakpoints previously saved to a file with \"breakpoint write\". set -- Sets a breakpoint or set of breakpoints in the executable. write -- Write the breakpoints listed to a file that can be read in with \"breakpoint read\". If given no arguments, writes all breakpoints. For more help on any particular subcommand, type 'help '. breakpoint set语法 (lldb) help breakpoint set Sets a breakpoint or set of breakpoints in the executable. Syntax: breakpoint set Command Options Usage: breakpoint set [-DHd] -l [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-R ] [-N ] [-u ] [-f ] [-m ] [-s ] [-K ] breakpoint set [-DHd] -a [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-N ] [-s ] breakpoint set [-DHd] -n [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-R ] [-N ] [-f ] [-L ] [-s ] [-K ] breakpoint set [-DHd] -F [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-R ] [-N ] [-f ] [-L ] [-s ] [-K ] breakpoint set [-DHd] -S [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-R ] [-N ] [-f ] [-L ] [-s ] [-K ] breakpoint set [-DHd] -M [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-R ] [-N ] [-f ] [-L ] [-s ] [-K ] breakpoint set [-DHd] -r [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-R ] [-N ] [-f ] [-L ] [-s ] [-K ] breakpoint set [-DHd] -b [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-R ] [-N ] [-f ] [-L ] [-s ] [-K ] breakpoint set [-ADHd] -p [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-N ] [-f ] [-m ] [-s ] [-X ] breakpoint set [-DHd] -E [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-N ] [-O ] [-h ] [-w ] breakpoint set [-DHd] -P [-k ] [-v ] [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-N ] [-f ] [-s ] breakpoint set [-DHd] -y [-G ] [-C ] [-c ] [-i ] [-o ] [-q ] [-t ] [-x ] [-T ] [-R ] [-N ] [-m ] [-s ] [-K ] -A ( --all-files ) All files are searched for source pattern matches. -C ( --command ) A command to run when the breakpoint is hit, can be provided more than once, the commands will get run in order left to right. -D ( --dummy-breakpoints ) Act on Dummy breakpoints - i.e. breakpoints set before a file is provided, which prime new targets. -E ( --language-exception ) Set the breakpoint on exceptions thrown by the specified language (without options, on throw but not catch.) -F ( --fullname ) Set the breakpoint by fully qualified function names. For C++ this means namespaces and all arguments, and for Objective-C this means a full functionprototype with class and selector. Can be repeated multiple times to make one breakpoint for multiple names. -G ( --auto-continue ) The breakpoint will auto-continue after running its commands. -H ( --hardware ) Require the breakpoint to use hardware breakpoints. -K ( --skip-prologue ) sKip the prologue if the breakpoint is at the beginning of a function. If not set the target.skip-prologue setting is used. -L ( --language ) Specifies the Language to use when interpreting the breakpoint's expression (note: currently only implemented for setting breakpoints on identifiers). If not set the target.language setting is used. -M ( --method ) Set the breakpoint by C++ method names. Can be repeated multiple times tomake one breakpoint for multiple methods. -N ( --breakpoint-name ) Adds this to the list of names for this breakpoint. -O ( --exception-typename ) The breakpoint will only stop if an exception Object of this type is thrown. Can be repeated multiple times to stop for multiple object types. If you just specify the type's base name it will match against that type in all modules, or you can specify the full type name including modules. Other submatches are not supported at present.Only supported for Swift at present. -P ( --script-class ) The name of the class that will manage a scripted breakpoint. -R ( --address-slide ) Add the specified offset to whatever address(es) the breakpoint resolves to. At present this applies the offset directly as given, and doesn't try to align it to instruction boundaries. -S ( --selector ) Set the breakpoint by ObjC selector name. Can be repeated multiple times tomake one breakpoint for multiple Selectors. -T ( --thread-name ) The breakpoint stops only for the thread whose thread name matches this argument. -X ( --source-regexp-function ) When used with '-p' limits the source regex to source contained in the namedfunctions. Can be repeated multiple times. -a ( --address ) Set the breakpoint at the specified address. If the address maps uniquely toa particular binary, then the address will be converted to a \u0012file\u0012address, so that the breakpoint will track that binary+offset no matter where the binary eventually loads. Alternately, if you also specify the module - with the -s option - then the address will be treated as a file address in that module, and resolved accordingly. Again, this will allow lldb to track that offset on subsequent reloads. The module need not have been loaded at the time you specify this breakpoint, and will get resolved when the module is loaded. -b ( --basename ) Set the breakpoint by function basename (C++ namespaces and arguments will beignored). Can be repeated multiple times to make one breakpoint for multiplesymbols. -c ( --condition ) The breakpoint stops only if this condition expression evaluates to true. -d ( --disable ) Disable the breakpoint. -f ( --file ) Specifies the source file in which to set this breakpoint. Note, by default lldb only looks for files that are #included if they use the standard include file extensions. To set breakpoints on .c/.cpp/.m/.mm files that are #included, set target.inline-breakpoint-strategy to \u0012always\u0012. -h ( --on-catch ) Set the breakpoint on exception catcH. -i ( --ignore-count ) Set the number of times this breakpoint is skipped before stopping. -k ( --structured-data-key ) The key for a key/value pair passed to the implementation of a scripted breakpoint. Pairs can be specified more than once. -l ( --line ) Specifies the line number on which to set this breakpoint. -m ( --move-to-nearest-code ) Move breakpoints to nearest code. If not set the target.move-to-nearest-codesetting is used. -n ( --name ) Set the breakpoint by function name. Can be repeated multiple times to makeone breakpoint for multiple names -o ( --one-shot ) The breakpoint is deleted the first time it stop causes a stop. -p ( --source-pattern-regexp ) Set the breakpoint by specifying a regular expression which is matched against the source text in a source file or files specified with the -f can be specified more than once. If no source files are specified, uses the current \u0012default source file\u0012. If you want to match against all source files, pass the \u0012--all-files\u0012 option. -q ( --queue-name ) The breakpoint stops only for threads in the queue whose name is given by this argument. -r ( --func-regex ) Set the breakpoint by function name, evaluating a regular-expression to find the function name(s). -s ( --shlib ) Set the breakpoint only in this shared library. Can repeat this option multiple times to specify multiple shared libraries. -t ( --thread-id ) The breakpoint stops only for the thread whose TID matches this argument. -u ( --column ) Specifies the column number on which to set this breakpoint. -v ( --structured-data-value ) The value for the previous key in the pair passed to the implementation of a scripted breakpoint. Pairs can be specified more than once. -w ( --on-throw ) Set the breakpoint on exception throW. -x ( --thread-index ) The breakpoint stops only for the thread whose index matches this argument. -y ( --joint-specifier ) A specifier in the form filename:line[:column] for setting file & line breakpoints. crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 21:49:32 "},"lldb_commands/common_cmd/watchpoint.html":{"url":"lldb_commands/common_cmd/watchpoint.html","title":"watchpoint","keywords":"","body":"watchpoint TODO： 【已解决】Xcode中lldb中如何给watchpoint加上条件判断过滤 【已解决】Xcode中lldb的条件watchpoint报错：error user expression indirection requires pointer operand long invalid 【已解决】Xcode的lldb中如何监控结构体变量值的变化 【未解决】研究YouTube逻辑：监控NSArray的_allTrackRenderers值被改动 【未解决】YouTube的HAMPlayerInternal的playerLoop中监控_currentTime变量值变化 watchpoint举例 (lldb) watchpoint set expr 0x000000011ceb5818 Watchpoint created: Watchpoint 1: addr = 0x11ceb5818 size = 8 state = enabled type = w new value: 0 触发时打印： Watchpoint 1 hit: old value: 0 new value: 0 关闭所有： (lldb) watchpoint disable All watchpoints disabled. (4 watchpoints) 打开所有： (lldb) watchpoint enable All watchpoints enabled. (4 watchpoints) watchpoint语法 (lldb) help watchpoint Commands for operating on watchpoints. Syntax: watchpoint [] The following subcommands are supported: command -- Commands for adding, removing and examining LLDB commands executed when the watchpoint is hit (watchpoint 'commands'). delete -- Delete the specified watchpoint(s). If no watchpoints are specified, delete them all. disable -- Disable the specified watchpoint(s) without removing it/them. If no watchpoints are specified, disable them all. enable -- Enable the specified disabled watchpoint(s). If no watchpoints are specified, enable all of them. ignore -- Set ignore count on the specified watchpoint(s). If no watchpoints are specified, set them all. list -- List all watchpoints at configurable levels of detail. modify -- Modify the options on a watchpoint or set of watchpoints in the executable. If no watchpoint is specified, act on the last created watchpoint. Passing an empty argument clears the modification. set -- Commands for setting a watchpoint. For more help on any particular subcommand, type 'help '. crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 21:47:04 "},"lldb_commands/common_cmd/debug_control/":{"url":"lldb_commands/common_cmd/debug_control/","title":"调试控制","keywords":"","body":"调试控制 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/common_cmd/debug_control/run.html":{"url":"lldb_commands/common_cmd/debug_control/run.html","title":"run","keywords":"","body":"run crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/common_cmd/debug_control/continue.html":{"url":"lldb_commands/common_cmd/debug_control/continue.html","title":"continue","keywords":"","body":"continue crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:30:12 "},"lldb_commands/common_cmd/debug_control/next/":{"url":"lldb_commands/common_cmd/debug_control/next/","title":"next","keywords":"","body":"next crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/common_cmd/debug_control/next/nexti.html":{"url":"lldb_commands/common_cmd/debug_control/next/nexti.html","title":"nexti","keywords":"","body":"nexti crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/common_cmd/debug_control/step/":{"url":"lldb_commands/common_cmd/debug_control/step/","title":"step","keywords":"","body":"step crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/common_cmd/debug_control/step/stepi.html":{"url":"lldb_commands/common_cmd/debug_control/step/stepi.html","title":"stepi","keywords":"","body":"stepi crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/common_cmd/debug_control/jump.html":{"url":"lldb_commands/common_cmd/debug_control/jump.html","title":"jump","keywords":"","body":"jump crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/common_cmd/debug_control/finish.html":{"url":"lldb_commands/common_cmd/debug_control/finish.html","title":"finish","keywords":"","body":"finish crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_commands/common_cmd/debug_control/exit.html":{"url":"lldb_commands/common_cmd/debug_control/exit.html","title":"exit","keywords":"","body":"exit crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:28:22 "},"lldb_summary/":{"url":"lldb_summary/","title":"LLDB心得","keywords":"","body":"LLDB心得 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:38:01 "},"lldb_summary/cmd_abbr.html":{"url":"lldb_summary/cmd_abbr.html","title":"命令缩写","keywords":"","body":"命令缩写 lldb命令的缩写：所有命令都支持任意前缀字符的缩写，只要不产生混淆 lldb中的命令，可以缩写 比如： print 常见缩写是： p 但其实底层逻辑是： 从第一个字母p到最后一个字母t，缩写到任意位置都是可以的 前提是，只要不（和其他命令的前缀）产生混淆 举例 print print p 是lldb专门为print保留的p，所以可以用p 否则按道理，也会和其他process等命令产生冲突，也不能把print缩写为p pr 和process的pr是一样的前缀字符 lldb无法确定是哪个，所以就属于会产生冲突、混淆 所以不能用pr pri 可以 prin 可以 print 可以 所以总体结论就是： print 可以用特定的缩写：p 也可以用其他普通的，不产生冲突的缩写：pri、prin、print breakpoint 断点de的命令 breakpoint 可以缩写/简写为： breakpoin breakpoi breakpo breakp break brea bre br 而不能用： b 特殊：属于lldb中专门保留的特定的缩写 含义是：以某种特定的格式去添加断点 -》有了上面的缩写逻辑，则普通的： breakpoint list 就可以写为： breakpoin list breakpoi list breakpo list breakp list break list brea list bre list br list 都是可以的，都是等价的 子命令也支持缩写 当然命令的子命令，参数，也是同样支持缩写 比如此处 br list 的list也可以缩写： br lis br li br l 只要不产生冲突即可 此处就是breakpoint的子命令中，上述缩写不会冲突混淆即可。 注： 此处可以用help breakpoint去查看，breakpoint有哪些子命令 (lldb) help breakpoint Commands for operating on breakpoints (see 'help b' for shorthand.) Syntax: breakpoint [] The following subcommands are supported: clear -- Delete or disable breakpoints matching the specified source file and line. command -- Commands for adding, removing and listing LLDB commands executed when a breakpoint is hit. delete -- Delete the specified breakpoint(s). If no breakpoints are specified, delete them all. disable -- Disable the specified breakpoint(s) without deleting them. If none are specified, disable all breakpoints. enable -- Enable the specified disabled breakpoint(s). If no breakpoints are specified, enable all of them. list -- List some or all breakpoints at configurable levels of detail. modify -- Modify the options on a breakpoint or set of breakpoints in the executable. If no breakpoint is specified, acts on the last created breakpoint. With the exception of -e, -d and -i, passing an empty argument clears the modification. name -- Commands to manage name tags for breakpoints read -- Read and set the breakpoints previously saved to a file with \"breakpoint write\". set -- Sets a breakpoint or set of breakpoints in the executable. write -- Write the breakpoints listed to a file that can be read in with \"breakpoint read\". If given no arguments, writes all breakpoints. For more help on any particular subcommand, type 'help '. 其中可见，breakpoint的子命令： clear command delete disable enable modify name read set write 不会和上面的缩写lis、li、l，有冲突和混淆 -》所以你会看到，很多人常把： breakpoint list 写成： br l 就是这个目的： 尽量用缩写 -》减少输入的字符数 -》提高调试效率 其他常见缩写 其他常用缩写： expression -> e、 exp disassemble -> dis register -> reg register read -> reg r image -> im image lookup = im loo memory -> mem crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 21:47:06 "},"lldb_summary/xcode_lldb.html":{"url":"lldb_summary/xcode_lldb.html","title":"Xcode中lldb","keywords":"","body":"Xcode中lldb TODO： 【整理】Xcode的lldb调试心得：F7单步进入无名的汇编代码 【未解决】XCode和lldb如何根据函数地址加断点 【已解决】XCode和lldb调试常见用法和调试心得 【已解决】XCode的lldb中如何调试找到当前函数_dyld_get_image_name的返回值 【已解决】Xcode调试：lldb中临时变量 此处整理Xcode中的lldb的一些心得： 支持自动补全 Xcode中lldb中支持自动补全： 查看函数调用堆栈 lldb和XCode中查看函数调用堆栈=backtrace： XCode调试期间，想要查看：函数调用堆栈 至少有2种方法： XCode的UI界面中 XCode中，Command+鼠标单击： 即可看到全部的函数调用堆栈： 注： 直接鼠标点击（不加Command键），则只显示缩略后的信息： 且和Debug Navigator中的线程下面的 函数调用堆栈 简略信息 是一致的： lldb命令bt bt = thread backtrace =th b =th ba 举例： (lldb) bt * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 17.1 * frame #0: 0x0000000117cf5368 MuJiaBaiHuoTweak.dylib`_logos_function$_ungrouped$sysctl(name=0x000000016d8e39b0, namelen=4, oldp=0x000000016d8e39c0, oldlenp=0x000000016d8e39a8, newp=0x0000000000000000, newlen=0) at hook_misc.xm:148:21 [opt] frame #1: 0x0000000109832a00 AwemeCore`___lldb_unnamed_symbol143748$$AwemeCore + 96 frame #2: 0x0000000109869828 AwemeCore`___lldb_unnamed_symbol146535$$AwemeCore + 44 frame #3: 0x00000001027babd8 libdispatch.dylib`_dispatch_client_callout + 16 frame #4: 0x00000001027bc4c8 libdispatch.dylib`_dispatch_once_callout + 84 frame #5: 0x0000000108783b38 AwemeCore`___lldb_unnamed_symbol1904$$AwemeCore + 152 frame #6: 0x0000000108783a38 AwemeCore`___lldb_unnamed_symbol1902$$AwemeCore + 80 frame #7: 0x0000000108780ac8 AwemeCore`___lldb_unnamed_symbol1801$$AwemeCore + 752 frame #8: 0x00000001097e37d4 AwemeCore`___lldb_unnamed_symbol140177$$AwemeCore + 80 frame #9: 0x00000001027babd8 libdispatch.dylib`_dispatch_client_callout + 16 frame #10: 0x00000001027bc4c8 libdispatch.dylib`_dispatch_once_callout + 84 frame #11: 0x00000001087807cc AwemeCore`___lldb_unnamed_symbol1799$$AwemeCore + 100 frame #12: 0x0000000108780744 AwemeCore`___lldb_unnamed_symbol1798$$AwemeCore + 48 frame #13: 0x00000001089b1c1c AwemeCore`___lldb_unnamed_symbol14263$$AwemeCore + 76 frame #14: 0x0000000108763b88 AwemeCore`___lldb_unnamed_symbol1133$$AwemeCore + 428 frame #15: 0x0000000108728054 AwemeCore`___lldb_unnamed_symbol1$$AwemeCore + 84 frame #16: 0x00000001bda81e78 libobjc.A.dylib`load_images + 908 frame #17: 0x00000001028ba0d4 dyld`dyld::notifySingle(dyld_image_states, ImageLoader const*, ImageLoader::InitializerTimingList*) + 448 frame #18: 0x00000001028c95b8 dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 524 frame #19: 0x00000001028c953c dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 400 frame #20: 0x00000001028c8334 dyld`ImageLoader::processInitializers(ImageLoader::LinkContext const&, unsigned int, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 184 frame #21: 0x00000001028c83fc dyld`ImageLoader::runInitializers(ImageLoader::LinkContext const&, ImageLoader::InitializerTimingList&) + 92 frame #22: 0x00000001028ba420 dyld`dyld::initializeMainExecutable() + 216 frame #23: 0x00000001028bedb4 dyld`dyld::_main(macho_header const*, unsigned long, int, char const**, char const**, char const**, unsigned long*) + 4616 frame #24: 0x00000001028b9208 dyld`dyldbootstrap::start(dyld3::MachOLoaded const*, int, char const**, dyld3::MachOLoaded const*, unsigned long*) + 396 frame #25: 0x00000001028b9038 dyld`_dyld_start + 56 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 21:46:28 "},"lldb_summary/ios_reverse/":{"url":"lldb_summary/ios_reverse/","title":"iOS逆向","keywords":"","body":"iOS逆向 TODO： 整理常用的命令和举例 image po bt reg 等 iOS逆向时用LLDB调试iOS中ObjC的对象和相关内容 【记录】iOS逆向Xcode调试心得：bl后cmn再b.eq很像是switch case或if else的代码逻辑跳转 【未解决】Xcode的lldb调试iOS的ObjC或Swift时如何打印出objc_msgSend第一个参数是什么类的实例 【已解决】Xcode的lldb中如何访问类的实例的内部属性值 【未解决】Xcode的lldb的po中如何判断对象是否是某个类的实例 【已解决】XCode的lldb中如何调试运行iOS的ObjC代码 无名函数 iOS逆向期间，往往可以看到这种函数名： AwemeCore`___lldb_unnamed_symbol148$$AwemeCore 其实就是个：无名函数 完整的解释是： AwemeCore___lldb_unnamed_symbol148$$AwemeCore` AwemeCore：函数所属于的（哪个）二进制 注：理论上，同一个函数，可能会出现在多个二进制中 ___lldb_unnamed_symbol148$$AwemeCore 无名函数 ___lldb_unnamed_symbol148：函数名的部分 AwemeCore：二进制的名字 -》由此可以总结出： lldb中的无名函数的命名规则 ___lldb_unnamed_symbolNNN$$BinaryName ___lldb_unnamed_symbol148$$AwemeCore NNN=148 从1开始编号 BinaryName=AwemeCore 对应着当前lldb正在调试的二进制是AwemeCore -》 知道这个能干什么？ 后续去给某个无名函数去加断点时，要注意把函数名写完整了，不要漏写成： ___lldb_unnamed_symbol148 否则是无法触发断点的 要写成完整的函数名： ___lldb_unnamed_symbol148$$AwemeCore 才能正常触发断点 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 21:48:08 "},"lldb_summary/ios_reverse/chisel.html":{"url":"lldb_summary/ios_reverse/chisel.html","title":"chisel","keywords":"","body":"chisel TODO： 【记录】用chisel调试iOS的app用法和心得 【未解决】YouTube的HAMPlayerInternal的playerLoop中监控_currentTime变量值变化 chisel 是什么：lldb的一个插件 用途：主要用于iOS逆向期间辅助调试 主页 https://github.com/facebook/chisel facebook/chisel: Chisel is a collection of LLDB commands to assist debugging iOS apps. crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-27 21:50:40 "},"lldb_summary/llvm.html":{"url":"lldb_summary/llvm.html","title":"LLVM","keywords":"","body":"LLVM 此处也顺带去整理LLDB所属的开源项目LLVM的相关内容： LLVM =Low Level Virtual Machine 是什么=一句话描述 一套用于构建出高度优化的编译器、优化器、运行环境的工具集合的开源项目 a toolkit for the construction of highly optimized compilers, optimizers, and runtime environments. 主要包含3个部分 LLVM套件=LLVM Suite 包含各种 工具 汇编器=assembler 反汇编器=disassembler 位码分析器=bitcode analyzer 位码优化器=bitcode optimizer 简单的回归测试 用于测试LLVM工具和Clang前端 库 头文件 Clang=Clang前端=Clang front end 是什么：LLVM的内置的原生的C/C++/Objective-C编译器 可以把C, C++, Objective-C和Objective-C++的代码，编译成LLVM bitcode 然后就可以用LLVM套件去操作此（编译后的）程序了 测试套件=Test Suite 一堆工具的集合 测试LLVM的功能和性能 子项目 LLVM Core libraries a modern source- and target-independent optimizer, along with code generation support for many popular CPUs Clang an LLVM native C/C++/Objective-C compiler LLDB a great native debugger 基于LLVM和Clang libc++和libc++ ABI a standard conformant and high-performance implementation of the C++ Standard Library including full support for C++11 and C++14 compiler-rt provides highly tuned implementations of the low-level code generator MLIR a novel approach to building reusable and extensible compiler infrastructure OpenMP an OpenMP runtime for use with the OpenMP implementation in Clang polly a suite of cache-locality optimizations as well as auto-parallelism and vectorization using a polyhedral model libclc implement the OpenCL standard library klee implements a \"symbolic virtual machine\" which uses a theorem prover to try to evaluate all dynamic paths through a program in an effort to find bugs and to prove properties of functions LLD a new linker a drop-in replacement for system linkers and runs much faster 资料 官网 The LLVM Compiler Infrastructure Project https://llvm.org 快速上手 Getting Started with the LLVM System — LLVM 12 documentation https://llvm.org/docs/GettingStarted.html 相关 概念 IR=Intermediate Representation=中间表示层 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 17:57:52 "},"appendix/":{"url":"appendix/","title":"附录","keywords":"","body":"附录 下面列出相关参考资料。 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 14:21:42 "},"appendix/docs.html":{"url":"appendix/docs.html","title":"文档","keywords":"","body":"文档 官网 LLDB Homepage — The LLDB Debugger http://lldb.llvm.org 教程 Tutorial — The LLDB Debugger https://lldb.llvm.org/use/tutorial.html LLDB和GDB命令对比 GDB to LLDB command map — The LLDB Debugger https://lldb.llvm.org/use/map.html 背景：由于GDB使用更广泛，所以LLDB为了让从GDB转过来的人，更快上手，而整理了GDB命令到LLDB命令的映射的文档，介绍的很详细，值得参考 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 15:46:07 "},"appendix/reference.html":{"url":"appendix/reference.html","title":"参考资料","keywords":"","body":"参考资料 lldb调试器知多少 - 掘金 (juejin.cn) LLDB调试器使用简介 | 南峰子的技术博客 (southpeak.github.io) ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹 (objccn.io) GDB to LLDB command map — The LLDB Debugger LLDB 调试命令使用指南 - 链滴 (ld246.com) LLDB Homepage — The LLDB Debugger (llvm.org) Tutorial — The LLDB Debugger (llvm.org) LLDB (debugger) - Wikipedia) Dancing in the Debugger — A Waltz with LLDB · objc.io lldb cheat sheet crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-26 17:42:38 "}}